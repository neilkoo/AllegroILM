create or replace PACKAGE ALLEGRO_ILM AS

  PROCEDURE  PUT_REQUEST(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_ACTION                  IN  ILM_REQUESTS.ACTION%TYPE,           -- ARCH/RSTR/PURG
    I_FILTER_VALUATION        IN  ILM_REQUESTS.FILTER_VALUATION%TYPE, -- ONLY VALID FOR VALUATION
    I_FILTER_DATE             IN  ILM_REQUESTS.FILTER_DATE%TYPE,      -- USED TO OPERATE ON DBAUDIT/CORRELATION/PRICEVALUE/VOLATILITY, date type
    I_REQUEST_BY              IN  ILM_REQUESTS.REQUEST_BY%TYPE,
    I_OVERRIDE_OTHER_REQUEST  IN  ILM_REQUESTS.OVERRIDE_OTHER_REQUEST%TYPE, -- [Y|N], DEFAULT N, ONLY ONE ENTRY CAN BE ACTIVE FOR I_TARGETNAME+[I_VALUATION|I_DATE], SET TO Y WILL CALCEL OTHER REQUEST
    O_REQUEST_ID              OUT ILM_REQUESTS.REQUEST_ID%TYPE,
    O_RET_CODE                OUT VARCHAR2,                                 -- S_0:Success, S_2:Failed
    O_RET_MESSAGE             OUT VARCHAR2
  );

  PROCEDURE  PUT_REQUESTS(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_REQUEST_BY              IN  ILM_REQUESTS.REQUEST_BY%TYPE,
    O_ARCH_REQUEST_SUCCESS    OUT NUMBER,
    O_ARCH_REQUEST_FAIL       OUT NUMBER,
    O_PURG_REQUEST_SUCCESS    OUT NUMBER,
    O_PURG_REQUEST_FAIL       OUT NUMBER,
    O_RET_CODE                OUT VARCHAR2,
    O_RET_MESSAGE             OUT VARCHAR2
  );

  PROCEDURE  PUT_REQUESTS(
    I_REQUEST_BY              IN  ILM_REQUESTS.REQUEST_BY%TYPE,
    O_ARCH_REQUEST_SUCCESS    OUT NUMBER,
    O_ARCH_REQUEST_FAIL       OUT NUMBER,
    O_PURG_REQUEST_SUCCESS    OUT NUMBER,
    O_PURG_REQUEST_FAIL       OUT NUMBER,
    O_RET_CODE                OUT VARCHAR2,
    O_RET_MESSAGE             OUT VARCHAR2
  );


  --
  PROCEDURE  CANCEL_REQUEST(
    I_CNCL_REQUEST_ID         IN  ILM_REQUESTS.REQUEST_ID%TYPE,
    I_CANCELLED_BY            IN  ILM_REQUESTS.CANCELLED_BY%TYPE,
    O_RET_CODE                OUT VARCHAR2,                           -- C_SUCCESS, C_NO_DATA_FOUND
    O_RET_MESSAGE             OUT VARCHAR2
  );

  PROCEDURE  CANCEL_REQUEST(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_CNCL_VALUATION          IN  ILM_REQUESTS.FILTER_VALUATION%TYPE, -- ONLY VALID FOR VALUATION
    I_CNCL_DATE               IN  ILM_REQUESTS.FILTER_DATE%TYPE,      -- USED TO OPERATE ON DBAUDIT/CORRELATION/PRICEVALUE/VOLATILITY
    I_CANCELLED_BY            IN  ILM_REQUESTS.CANCELLED_BY%TYPE,
    O_RET_CODE                OUT VARCHAR2,                           -- S_0:Success, S_2:Failed
    O_RET_MESSAGE             OUT VARCHAR2
  );


  PROCEDURE START_MAINTENANCE_WINDOW(
    I_WINDOW_ID                  IN  NUMBER  ,
    I_STARTED_BY                 IN  VARCHAR2,
    I_WINDOW_SIZE_MINUTES        IN  NUMBER  ,  -- BATCH PROCESSING WINDOW
    I_WINDOW_MODE                IN  VARCHAR2,   -- ARCH | NON-VD | MAINTENANCE
    O_WINDOW_ACTUAL_START        OUT DATE    ,
    O_WINDOW_ACTUAL_END          OUT DATE    ,
    O_REQ_COUNTER_RECOVER_ALL    OUT NUMBER  ,
    O_REQ_COUNTER_RECOVER_FAIL   OUT NUMBER  ,
    O_REQ_COUNTER_RECOVER_SUCC   OUT NUMBER  ,
    O_REQ_COUNTER_START_NEW      OUT NUMBER  ,
    O_REQ_COUNTER_START_LEFTOVER OUT NUMBER  ,
    O_REQ_COUNTER_END_SUCC       OUT NUMBER  ,
    O_REQ_COUNTER_END_FAIL       OUT NUMBER  ,
    O_REQ_COUNTER_END_LEFT       OUT NUMBER  ,
    O_RET_CODE                   OUT VARCHAR2,
    O_RET_MESSAGE                OUT VARCHAR2
  );

  PROCEDURE ILM_EXECUTION_RSTR;       --New in V1.1, only process restore request, can start any time
  PROCEDURE ILM_EXECUTION_NON_VD;     --New in V1.1, process all requests except for VD ARCH request, can start any time
  PROCEDURE START_MAINTENANCE_WINDOW; --New in V1.1, start maintenance window in full mode
  PROCEDURE PUT_REQUESTS;             --New in V1.1, this will call PUT_REQUESTS FULL mode
  PROCEDURE EMERA_APR_USERINPUT;      --New in V1.1, this will read user input from  EMERA_APR_USERINPUT table and submit/cancel requests


  PROCEDURE REFRESH_STATUS_SINGLE(
    I_TARGET_NAME   IN  VARCHAR2,
    I_TARGET_FILTER IN  VARCHAR2,
    I_MY_REQUEST_ID IN  VARCHAR2 DEFAULT NULL,
    O_RET_CODE      OUT VARCHAR2,
    O_RET_MESSAGE   OUT VARCHAR2
  );

  PROCEDURE REFRESH_STATUS_TARGET(
    I_TARGET_NAME IN  VARCHAR2,
    O_RET_CODE    OUT VARCHAR2,
    O_RET_MESSAGE OUT VARCHAR2
  );

  PROCEDURE REFRESH_STATUS_ALL(
    O_RET_CODE    OUT VARCHAR2,
    O_RET_MESSAGE OUT VARCHAR2
  );


  PROCEDURE VALIDATE_TARGET(
    I_TARGET_NAME            IN  ILM_OPERATION_MATRIX.TARGET_NAME%TYPE,
    O_RET_OUTPUT             OUT VARCHAR2,
    O_RET_ISSUE_CORRECTION   OUT VARCHAR2
  );


  PROCEDURE CREATE_VIEW_FOR_APR_REQ(
    I_TARGET_NAME   IN  VARCHAR2,
    O_RET_CODE      OUT VARCHAR2,
    O_RET_MESSAGE   OUT VARCHAR2
  );

  -- Not implemented yet!
  PROCEDURE COMPARE_CKSUM (
    I_TABLE_NAME        IN  VARCHAR2,
    I_FILTER_VALUATION  IN  VARCHAR2,
    I_FILTER_DATE       IN  VARCHAR2,
    I_ARCH_REQ_ID       IN  VARCHAR2,
    O_RET_CODE          OUT VARCHAR2,
    O_RET_MESSAGE       OUT VARCHAR2
  );

  PROCEDURE COMPARE_CKSUM_W_LAST_ARCH (
    I_TABLE_NAME        IN  VARCHAR2,
    I_FILTER_VALUATION  IN  VARCHAR2,
    I_FILTER_DATE       IN  VARCHAR2,
    O_RET_CODE          OUT VARCHAR2,
    O_RET_MESSAGE       OUT VARCHAR2
  );

  -- Dont invoke this procedure, it's used by window processing to submit job!
  PROCEDURE PROCESS_IN_ARCHIVE(
    I_REQUEST_ID  IN  ILM_REQUESTS.REQUEST_ID%TYPE,
    I_WINDOW_ID   IN  ILM_WINDOWS.WINDOW_ID%TYPE
  );

  -- Dont invoke this procedure, it's used by window processing to submit job!
  PROCEDURE PROCESS_IN_ARCHIVE(
    I_REQUEST_ID         IN  ILM_REQUESTS.REQUEST_ID%TYPE,
    I_WINDOW_ID          IN  ILM_WINDOWS.WINDOW_ID%TYPE,
    O_RET_CODE                OUT VARCHAR2,                           -- C_SUCCESS, C_NO_DATA_FOUND
    O_RET_MESSAGE             OUT VARCHAR2
  );



  ------------------------------------------
  -- GLOBAL CONSTANT SECTION
  ------------------------------------------

  --PHASE NAMES
  C_PHASE_STAGE_CODE  CONSTANT VARCHAR2(10) := 'STAGE';
  C_PHASE_P_ARCH_CODE CONSTANT VARCHAR2(10) := 'P_ARCH';
  C_PHASE_P_ALG_CODE  CONSTANT VARCHAR2(10) := 'P_ALG';
  C_PHASE_FINISH_CODE CONSTANT VARCHAR2(10) := 'FINISH';

  --STATUS CODES
  C_STATUS_CODE_SUCCESS_STAGE   CONSTANT VARCHAR2(10) :=      'S_0';
  C_STATUS_CODE_SUCCESS_P_ARCH  CONSTANT VARCHAR2(10) := 'P_ARCH_0';
  C_STATUS_CODE_SUCCESS_P_ALG   CONSTANT VARCHAR2(10) :=  'P_ALG_0';

  C_STATUS_CODE_START_STAGE     CONSTANT VARCHAR2(10) :=      'S_1';
  C_STATUS_CODE_START_P_ARCH    CONSTANT VARCHAR2(10) := 'P_ARCH_1';
  C_STATUS_CODE_START_P_ALG     CONSTANT VARCHAR2(10) :=  'P_ALG_1';

  C_STATUS_CODE_FAIL_STAGE      CONSTANT VARCHAR2(10) :=      'S_2';
  C_STATUS_CODE_FAIL_P_ARCH     CONSTANT VARCHAR2(10) := 'P_ARCH_2';
  C_STATUS_CODE_FAIL_P_ALG      CONSTANT VARCHAR2(10) :=  'P_ALG_2';

  C_SUCCESS                 CONSTANT VARCHAR2(10) :=  'SUCCESS';
  C_FAILURE                 CONSTANT VARCHAR2(10) :=  'FAILURE';
  C_PENDING                 CONSTANT VARCHAR2(10) :=  'PENDING';

  C_INVALID_TARGET          CONSTANT VARCHAR2(40) :=  'TARGET-NOT-IN-ILM-LIST';
  C_REPORT_DB_NOT_AVAILABLE CONSTANT VARCHAR2(40) :=  'REPORTING-DB-NOT-AVAILABLE';
  C_NO_FILTER               CONSTANT VARCHAR2(40) :=  'NO-FILTER-SPECIFIED';

  C_ARCH_NOT_ALLOW          CONSTANT VARCHAR2(40) :=  'ARCHIVE-OPERATION-NOT-ALLOWED';
  C_RSTR_NOT_ALLOW          CONSTANT VARCHAR2(40) :=  'RESTORE-OPERATION-NOT-ALLOWED';
  C_PURG_NOT_ALLOW          CONSTANT VARCHAR2(40) :=    'PURGE-OPERATION-NOT-ALLOWED';

  C_OPER_NOT_RECOG          CONSTANT VARCHAR2(40) :=  'CANNOT-RECOGNIZE-ACTION';

  C_INVALID_VALUATION       CONSTANT VARCHAR2(40) :=  'INVALID-VALUATION-NUMBER';
  C_INVALID_DATE            CONSTANT VARCHAR2(40) :=  'INVALID-DATE';

  C_ACTIVE_ACTION           CONSTANT VARCHAR2(80)  :=  'AN-ACTIVE-ACTION-IS-ON-THIS-ITEM';
  C_ILM_UNIT_NOT_EXIST      CONSTANT VARCHAR2(100) :=  'CANNOT-FIND-TARGET-ENTRY-IN-EITHER-LIVE/ARCHIVE-DATA-OR-ACTION-HISTORY';
  C_REQ_ID_NOT_EXIST        CONSTANT VARCHAR2(100) :=  'CANNOT-FIND-REQUEST';
  C_OTHER_REQ_FOUND         CONSTANT VARCHAR2(100) :=  'FOUND-ANOTHER-ONGOING-REQUEST-ON-THE-SAME-ENTRY';

  C_ARCH_STATUS_NEED_RECOVERY   CONSTANT VARCHAR2(80) := 'ABNORMAL-ARCHIVE-STATUS-NEED-RECOVERY!';
  C_ARCH_STATUS_SUCCESS         CONSTANT VARCHAR2(80) := C_SUCCESS;
  C_ARCH_STATUS_SUCCESS_WARN    CONSTANT VARCHAR2(80) := 'SUCCESS-WARNING';
  C_ARCH_STATUS_ERROR_NEED_ARCH CONSTANT VARCHAR2(80) := 'NEED-ARCHIVE_FIRST';
  C_ARCH_STATUS_ERROR_NOACTION  CONSTANT VARCHAR2(80) := 'SUCCESS-NO-ACTION-REQUIRED';
  C_ARCH_STATUS_ERROR_NODATA    CONSTANT VARCHAR2(80) := 'SUCCESS-NO-DATA';

  C_NO_DATA_FOUND CONSTANT VARCHAR2(40) :=  'NO-DATA-FOUND';



  C_WINDOW_TIMEOUT CONSTANT VARCHAR2(40) :=  'WINDOW-TIMED-OUT!';




END ALLEGRO_ILM;
/



create or replace PACKAGE BODY ALLEGRO_ILM AS

  /*
  Version       : 0.1
  Creation Date : 2018-06-01
  Created  by   : Peng.Miao@nspower.ca

  Modification History:
  When :
  Who  :
  Why  :
  What :


  */


  --Global variable section
  GV_REQ_STEP_ID                 NUMBER := 1;
  GV_WINDOW_STEP_ID              NUMBER := 1;

  --------------------------------------------------
  -- PRIVATE PACKAGE MEMBER IMPLEMENTATION
  --------------------------------------------------
  PROCEDURE VALIDATE_ENVIRONMENT_PAIRS(
    O_RET_CODE                OUT VARCHAR2,
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_ALLEGRO_SERVER_NAME      VARCHAR2(100);
    V_ALLEGRO_DB_NAME          VARCHAR2(100);
    V_REPORTING_SERVER_NAME    VARCHAR2(100);
    V_REPORTING_DB_NAME        VARCHAR2(100);

    V_PAIR_EXIST               NUMBER := 0;
  BEGIN
    SELECT UPPER(INSTANCE_NAME),UPPER(HOST_NAME)
      INTO V_ALLEGRO_DB_NAME,V_ALLEGRO_SERVER_NAME
      FROM V$INSTANCE;
    SELECT UPPER(INSTANCE_NAME),UPPER(HOST_NAME)
      INTO V_REPORTING_DB_NAME,V_REPORTING_SERVER_NAME
      FROM V$INSTANCE@DBL_REPORTING;

    --discard the domain name
    V_ALLEGRO_SERVER_NAME   := REGEXP_SUBSTR(V_ALLEGRO_SERVER_NAME  , '[^.]+', 1, 1, 'imx') ;
    V_REPORTING_SERVER_NAME := REGEXP_SUBSTR(V_REPORTING_SERVER_NAME, '[^.]+', 1, 1, 'imx') ;

    SELECT COUNT(*)
      INTO V_PAIR_EXIST
      FROM ILM_ALL_ENVIRONMENTS
     WHERE ALLEGRO_SERVER_NAME   = V_ALLEGRO_SERVER_NAME
       AND ALLEGRO_DB_NAME       = V_ALLEGRO_DB_NAME
       AND REPORTING_SERVER_NAME = V_REPORTING_SERVER_NAME
       AND REPORTING_DB_NAME     = V_REPORTING_DB_NAME;

    IF ( V_PAIR_EXIST > 0 ) THEN
      O_RET_CODE    := C_SUCCESS;
    ELSE
      O_RET_CODE    := C_FAILURE;
      O_RET_MESSAGE := 'Cannot find the environment pair in ILM_ALL_ENVIRONMENT_PAIRS table for allegro and it''s reporting database.' ||
                       ' Current environment: allegro -> '|| V_ALLEGRO_SERVER_NAME||'('||V_ALLEGRO_DB_NAME||') ' ||
                                           'reporting -> '|| V_REPORTING_SERVER_NAME||'('||V_REPORTING_DB_NAME||') ';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      O_RET_CODE    := C_FAILURE;
      O_RET_MESSAGE := 'Unexpected exception, SQL error message:'|| SUBSTR(SQLERRM,1,100);
  END VALIDATE_ENVIRONMENT_PAIRS;


  PROCEDURE LOG_WINDOW_INFO(
    I_WINDOW_ID    IN     NUMBER,
    IO_STEP_ID     IN OUT NUMBER  ,
    I_STEP_NAME    IN     VARCHAR2,
    I_ERROR_CODE   IN     VARCHAR2,
    I_ERROR_MSG    IN     VARCHAR2
  )
  IS
  BEGIN
    INSERT INTO ILM_WINDOW_DETAILS(
        WINDOW_ID,
        STEP_ID ,
        STEP_NAME ,
        LOG_TIME,
        ERROR_CODE,
        ERROR_MSG)
      VALUES(
        I_WINDOW_ID,
        IO_STEP_ID,
        I_STEP_NAME,
        SYSDATE,
        I_ERROR_CODE,
        I_ERROR_MSG);
    UPDATE ILM_WINDOWS
       SET RET_CODE = I_ERROR_CODE,
           RET_MESSAGE = I_ERROR_MSG
     WHERE WINDOW_ID = I_WINDOW_ID;
    COMMIT;
	DBMS_OUTPUT.PUT_LINE('['||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') ||'] '||
	                     ' WINDOW_ID: '|| I_WINDOW_ID ||
	                     ' STEP: ' ||IO_STEP_ID || ' '|| I_STEP_NAME||
	                     ' RET:'   ||I_ERROR_CODE||' '|| I_ERROR_MSG
	                     );
    IO_STEP_ID := IO_STEP_ID + 1;
  END LOG_WINDOW_INFO;


  -- Log processing information to REQUEST DETAIL table
  PROCEDURE LOG_STEP_INFO(
    I_REQUEST_ID   IN     NUMBER,
    I_PHASE_NAME   IN     VARCHAR2,
    IO_STEP_ID     IN OUT NUMBER  ,
    I_STEP_NAME    IN     VARCHAR2,
    I_ERROR_CODE   IN     VARCHAR2,
    I_ERROR_MSG    IN     VARCHAR2
  )
  IS
  BEGIN
    INSERT INTO ILM_REQUEST_DETAILS(
        REQUEST_ID,
        PHASE_NAME,
        STEP_ID ,
        STEP_NAME ,
        LOG_TIME,
        ERROR_CODE,
        ERROR_MSG)
      VALUES(
        I_REQUEST_ID,
        I_PHASE_NAME,
        IO_STEP_ID,
        I_STEP_NAME,
        SYSDATE,
        I_ERROR_CODE,
        I_ERROR_MSG);
    UPDATE ILM_REQUESTS
       SET LAST_STEP_ID = IO_STEP_ID,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID = I_REQUEST_ID;
    COMMIT;
	DBMS_OUTPUT.PUT_LINE('['||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') ||'] '||
	                     ' REQUEST_ID: '|| I_REQUEST_ID ||
	                     ' PHASE: '|| I_PHASE_NAME ||
	                     ' STEP: ' ||IO_STEP_ID || ' '|| I_STEP_NAME||
	                     ' RET:'   ||I_ERROR_CODE||' '|| I_ERROR_MSG
	                     );
    IO_STEP_ID := IO_STEP_ID + 1;
  END LOG_STEP_INFO;


  PROCEDURE STAGE_PROCESS_STARTING(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS  = C_STATUS_CODE_START_STAGE ,
           CURRENT_PHASE = C_PHASE_STAGE_CODE,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  END STAGE_PROCESS_STARTING;

  PROCEDURE STAGE_PROCESS_FAILED(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_FAIL_STAGE ,
           CURRENT_PHASE = C_PHASE_FINISH_CODE,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE REQ STATUS IN STAGE_PROCESS_FAILED FOR REQ:'||I_REQ_ID);
  END STAGE_PROCESS_FAILED;

  PROCEDURE STAGE_PROCESS_SUCCEEDED(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_SUCCESS_STAGE ,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN NULL;
  END STAGE_PROCESS_SUCCEEDED;

  PROCEDURE P_ARCH_STARTING(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_START_P_ARCH ,
           CURRENT_PHASE = C_PHASE_P_ARCH_CODE,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  END P_ARCH_STARTING;

  PROCEDURE P_ARCH_FAILED(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_FAIL_P_ARCH ,
           CURRENT_PHASE = C_PHASE_FINISH_CODE,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE REQ STATUS IN P_ARCH_FAILED FOR REQ:'||I_REQ_ID) ;
  END P_ARCH_FAILED;

  PROCEDURE P_ARCH_SUCCEEDED(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_SUCCESS_P_ARCH ,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  END P_ARCH_SUCCEEDED;

  PROCEDURE P_ALG_STARTING(I_REQ_ID VARCHAR2, I_WINDOW_ID NUMBER)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_START_P_ALG,
           CURRENT_PHASE = C_PHASE_P_ALG_CODE,
           PROCESSED_WINDOW_ALG = I_WINDOW_ID,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  END P_ALG_STARTING;

  PROCEDURE P_ALG_FAILED(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_FAIL_P_ALG,
           CURRENT_PHASE = C_PHASE_FINISH_CODE,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE REQ STATUS IN P_ALG_FAILED FOR REQ:'||I_REQ_ID) ;
  END P_ALG_FAILED;

  PROCEDURE P_ALG_SUCCEEDED(I_REQ_ID VARCHAR2)
  AS
  BEGIN
    UPDATE ILM_REQUESTS
       SET PHASE_STATUS = C_STATUS_CODE_SUCCESS_P_ALG ,
           CURRENT_PHASE = C_PHASE_FINISH_CODE,
           LAST_UPDATE_DATE = SYSDATE
     WHERE REQUEST_ID   = I_REQ_ID;
    COMMIT;
  END P_ALG_SUCCEEDED;

  PROCEDURE GET_ARCHIVE_STATUS(
    I_TABLE_NAME              IN ILM_ARCHIVE_STATUS.TABLE_NAME%TYPE, -- VALUATIONDETAIL/VALUATIONSUMMARY/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_FILTER_VALUATION        IN ILM_REQUESTS.FILTER_VALUATION%TYPE, -- ONLY VALID FOR VALUATION
    I_FILTER_DATE             IN ILM_REQUESTS.FILTER_DATE%TYPE,      -- USED TO OPERATE ON DBAUDIT/CORRELATION/PRICEVALUE/VOLATILITY, FORMAT 'YYYY-MM-DD'
    O_IN_ALG                 OUT ILM_ARCHIVE_STATUS.IN_ALG%TYPE,
    O_IN_ARCH                OUT ILM_ARCHIVE_STATUS.IN_ARCH%TYPE,
    O_RET_CODE               OUT VARCHAR2,
    O_RET_MESSAGE            OUT VARCHAR2
  )
  IS
    V_SQL VARCHAR2(4000);
    V_TABLE_NAME ILM_ARCHIVE_STATUS.TABLE_NAME%TYPE := UPPER(I_TABLE_NAME);
  BEGIN
    O_RET_CODE := C_SUCCESS;
    O_RET_MESSAGE := NULL;

    V_SQL := 'SELECT DECODE(IN_ALG,''NODATA'',''N'',IN_ALG),DECODE(IN_ARCH,''NODATA'',''N'',IN_ARCH)
                FROM ILM_ARCHIVE_STATUS
               WHERE TABLE_NAME = '''||V_TABLE_NAME||''' ';
    IF ( UPPER(I_TABLE_NAME) = 'VALUATIONDETAIL' OR UPPER(I_TABLE_NAME) = 'VALUATIONSUMMARY' ) THEN
      V_SQL := V_SQL || ' AND VALUATION = ''' || I_FILTER_VALUATION || '''';
    ELSE
      V_SQL := V_SQL || ' AND TRUNC(TARGET_DATE) = TO_DATE(''' || TO_CHAR(I_FILTER_DATE,'YYYY-MM-DD') || ''',''YYYY-MM-DD'') ';
    END IF;
    --DBMS_OUTPUT.PUT_LINE(V_SQL);
    BEGIN
      EXECUTE IMMEDIATE V_SQL INTO O_IN_ALG,O_IN_ARCH;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        O_RET_CODE    := C_NO_DATA_FOUND;
        O_RET_MESSAGE := 'Cannot find archive information for table ' || V_TABLE_NAME||'('||I_FILTER_VALUATION||')';
      WHEN OTHERS THEN
        O_RET_CODE    := C_FAILURE;
        O_RET_MESSAGE := SUBSTR(SQLERRM,1,100);
    END;
  END GET_ARCHIVE_STATUS;

  PROCEDURE VALIDATE_ARCH(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_VD_ALG                  IN  VARCHAR2                     ,
    I_VD_ARCH                 IN  VARCHAR2                     ,
    I_VS_ALG                  IN  VARCHAR2                     ,
    I_VS_ARCH                 IN  VARCHAR2                     ,
    I_ALG                     IN  VARCHAR2                     ,
    I_ARCH                    IN  VARCHAR2                     ,
    O_RET_CODE                OUT VARCHAR2                     ,
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_STATUS_CODE             VARCHAR2(50);
    V_STATUS_MESSAGE          VARCHAR2(4000);
  BEGIN
    IF (UPPER(I_TARGET_NAME) = 'VALUATION') THEN
      --VD_ALG  VD_ARCH VS_ALG  VS_ARCH  COMMENT
      --     Y        Y      Y        Y  #1: Abnormal status should not happen, need recovery
      --     Y        Y      Y        N  #1: Abnormal status should not happen, need recovery
      --     Y        Y      N        Y  #1: Abnormal status should not happen, need recovery
      --     Y        Y      N        N  #1: Abnormal status should not happen, need recovery
      --     Y        N      Y        Y  #1: Abnormal status should not happen, need recovery
      --     N        N      Y        Y  #1: Abnormal status should not happen, need recovery
      --     N        Y      Y        Y  #1: Abnormal status should not happen, need recovery
      --     Y        N      Y        N  #2: Normal condition, validate successfully
      --     N        N      Y        N  #2: Normal condition, validate successfully
      --     Y        N      N        N  #2: Normal condition, validate successfully
      --     N        Y      Y        N  #3: Partially archived, archive the data still in live store
      --     Y        N      N        Y  #3: Partially archived, archive the data still in live store
      --     N        N      N        Y  #4: No action required, notify user already archived
      --     N        Y      N        Y  #4: No action required, notify user already archived
      --     N        Y      N        N  #4: No action required, notify user already archived
      --     N        N      N        N  #5: No action required, notify user no data to archive
      CASE
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS_WARN   ; --3: Partially archived, archive the data still in live store
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS_WARN   ; --3: Partially archived, archive the data still in live store
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --4: No action required, notify user already archived
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --4: No action required, notify user already archived
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --4: No action required, notify user already archived
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NODATA   ; --5: No action required, notify user no data to archive
      END CASE;
      V_STATUS_MESSAGE := V_STATUS_CODE||'|Data status in archive and allegro:'||' VD_ALG=' ||I_VD_ALG ||','||
                                          'VD_ARCH='||I_VD_ARCH||','||
                                          'VS_ALG=' ||I_VS_ALG ||','||
                                          'VS_ARCH='||I_VS_ARCH;
    ELSE
     --V_ALG  V_ARCH   COMMENT
      --    Y       Y   #1: Abnormal status should not happen, need recovery
      --    Y       N   #2: Normal condition, validate successfully
      --    N       Y   #3: No action required, notify user already archived
      --    N       N   #4: No action required, notify user no data to archive
      CASE
        WHEN (I_ALG='Y' AND I_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_ALG='Y' AND I_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_ALG='N' AND I_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --3: No action required, notify user already archived
        WHEN (I_ALG='N' AND I_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NODATA   ; --4: No action required, notify user no data to archive
      END CASE;
      V_STATUS_MESSAGE := V_STATUS_CODE||'|Data status in archive and allegro:'||' V_ALG=' ||I_ALG ||','||
                                          'V_ARCH='||I_ARCH;
    END IF;

    O_RET_CODE    := V_STATUS_CODE   ;
    O_RET_MESSAGE := V_STATUS_MESSAGE;
  END VALIDATE_ARCH;



  PROCEDURE VALIDATE_RSTR(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_VD_ALG                  IN  VARCHAR2                     ,
    I_VD_ARCH                 IN  VARCHAR2                     ,
    I_VS_ALG                  IN  VARCHAR2                     ,
    I_VS_ARCH                 IN  VARCHAR2                     ,
    I_ALG                     IN  VARCHAR2                     ,
    I_ARCH                    IN  VARCHAR2                     ,
    O_RET_CODE                OUT VARCHAR2                     ,
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_STATUS_CODE             VARCHAR2(50);
    V_STATUS_MESSAGE          VARCHAR2(4000);
  BEGIN
    IF (UPPER(I_TARGET_NAME) = 'VALUATION') THEN
      --VD_ALG  VD_ARCH VS_ALG  VS_ARCH  COMMENT
      --     Y        Y      Y        Y  #1: Abnormal status should not happen, need recovery
      --     Y        Y      Y        N  #1: Abnormal status should not happen, need recovery
      --     Y        Y      N        Y  #1: Abnormal status should not happen, need recovery
      --     Y        Y      N        N  #1: Abnormal status should not happen, need recovery
      --     Y        N      Y        Y  #1: Abnormal status should not happen, need recovery
      --     N        N      Y        Y  #1: Abnormal status should not happen, need recovery
      --     N        Y      Y        Y  #1: Abnormal status should not happen, need recovery
      --     Y        N      Y        N  #4: No action required, notify user already in the live store
      --     N        N      Y        N  #4: No action required, notify user already in the live store
      --     Y        N      N        N  #4: No action required, notify user already in the live store
      --     N        Y      Y        N  #3: Partially archived, archive the data still in live store
      --     Y        N      N        Y  #3: Partially archived, archive the data still in live store
      --     N        N      N        Y  #2: Normal condition, validate successfully
      --     N        Y      N        Y  #2: Normal condition, validate successfully
      --     N        Y      N        N  #2: Normal condition, validate successfully
      --     N        N      N        N  #5: No action required, notify user no data to restore
      CASE
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --4: No action required, notify user already in the live store
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --4: No action required, notify user already in the live store
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --4: No action required, notify user already in the live store
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS_WARN   ; --3: Partially archived, archive the data still in live store
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS_WARN   ; --3: Partially archived, archive the data still in live store
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NODATA   ; --5: No action required, notify user no data to archive
      END CASE;
      V_STATUS_MESSAGE := V_STATUS_CODE||' VD_ALG=' ||I_VD_ALG ||','||
                                          'VD_ARCH='||I_VD_ARCH||','||
                                          'VS_ALG=' ||I_VS_ALG ||','||
                                          'VS_ARCH='||I_VS_ARCH;
    ELSE
     --V_ALG  V_ARCH   COMMENT
      --    Y       Y   #1: Abnormal status should not happen, need recovery
      --    Y       N   #3: No action required, notify user already archived
      --    N       Y   #2: Normal condition, validate successfully
      --    N       N   #4: No action required, notify user no data to archive
      CASE
        WHEN (I_ALG='Y' AND I_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --1: Abnormal status should not happen, something stuck during WINDOW processing, need recovery
        WHEN (I_ALG='Y' AND I_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NOACTION ; --3: No action required, notify user already archived
        WHEN (I_ALG='N' AND I_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --2: Normal condition, validate successfully
        WHEN (I_ALG='N' AND I_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NODATA   ; --4: No action required, notify user no data to archive
      END CASE;
      V_STATUS_MESSAGE := V_STATUS_CODE||' V_ALG=' ||I_ALG ||','||
                                          'V_ARCH='||I_ARCH;
    END IF;

    O_RET_CODE    := V_STATUS_CODE   ;
    O_RET_MESSAGE := V_STATUS_MESSAGE;
  END VALIDATE_RSTR;

  PROCEDURE VALIDATE_PURG(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_VD_ALG                  IN  VARCHAR2                     ,
    I_VD_ARCH                 IN  VARCHAR2                     ,
    I_VS_ALG                  IN  VARCHAR2                     ,
    I_VS_ARCH                 IN  VARCHAR2                     ,
    I_ALG                     IN  VARCHAR2                     ,
    I_ARCH                    IN  VARCHAR2                     ,
    O_RET_CODE                OUT VARCHAR2                     ,
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_STATUS_CODE             VARCHAR2(50);
    V_STATUS_MESSAGE          VARCHAR2(4000);
    --V_PURGE_DIRECTLY_IN_LIVE  VARCHAR2(10);
    V_OPERATION_ARCH          ILM_OPERATION_MATRIX.OPERATION_ARCH%TYPE;
    V_EXIST_IN_OPERATION_MTX  VARCHAR2(10);
  BEGIN


    IF (UPPER(I_TARGET_NAME) = 'VALUATION') THEN
      --VD_ALG  VD_ARCH VS_ALG  VS_ARCH  COMMENT
      --     Y        Y      Y        Y  #1: Abnormal status should not happen, need recovery
      --     Y        Y      Y        N  #1: Abnormal status should not happen, need recovery
      --     Y        Y      N        Y  #1: Abnormal status should not happen, need recovery
      --     Y        Y      N        N  #1: Abnormal status should not happen, need recovery
      --     Y        N      Y        Y  #1: Abnormal status should not happen, need recovery
      --     N        N      Y        Y  #1: Abnormal status should not happen, need recovery
      --     N        Y      Y        Y  #1: Abnormal status should not happen, need recovery
      --     Y        N      Y        N  #3: Error state, need archive first
      --     N        N      Y        N  #3: Error state, need archive first
      --     Y        N      N        N  #3: Error state, need archive first
      --     N        Y      Y        N  #3: Error state, need archive first
      --     Y        N      N        Y  #3: Error state, need archive first
      --     N        N      N        Y  #2: Normal condition, validate successfully
      --     N        Y      N        Y  #2: Normal condition, validate successfully
      --     N        Y      N        N  #2: Normal condition, validate successfully
      --     N        N      N        N  #5: No action required, notify user no data to restore
      CASE
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY          ; --#1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY          ; --#1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY          ; --#1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY          ; --#1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY          ; --#1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY          ; --#1: Abnormal status should not happen, need recovery
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY          ; --#1: Abnormal status should not happen, need recovery

        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NEED_ARCH        ; --#3: Error state, need archive first
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NEED_ARCH        ; --#3: Error state, need archive first
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NEED_ARCH        ; --#3: Error state, need archive first
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='Y' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NEED_ARCH        ; --#3: Error state, need archive first
        WHEN (I_VD_ALG='Y' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NEED_ARCH        ; --#3: Error state, need archive first
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --#2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --#2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='Y' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --#2: Normal condition, validate successfully
        WHEN (I_VD_ALG='N' AND I_VD_ARCH='N' AND I_VS_ALG='N' AND I_VS_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NODATA   ; --#5: No action required, notify user no data to restore
      END CASE;
      V_STATUS_MESSAGE := V_STATUS_CODE||' VD_ALG=' ||I_VD_ALG ||','||
                                          'VD_ARCH='||I_VD_ARCH||','||
                                          'VS_ALG=' ||I_VS_ALG ||','||
                                          'VS_ARCH='||I_VS_ARCH;
    ELSE

      --V_ALG  V_ARCH   COMMENT
      --    Y       Y   #1: Abnormal status should not happen, need recovery
      --    Y       N   #3: Error state, need archive first
      --    N       Y   #2: Normal condition, validate successfully
      --    N       N   #4: No action required, notify user no data to archive
      CASE
        WHEN (I_ALG='Y' AND I_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_NEED_RECOVERY  ; --#1: Abnormal status should not happen, need recovery
        WHEN (I_ALG='Y' AND I_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NEED_ARCH; --#3: Error state, need archive first
        WHEN (I_ALG='N' AND I_ARCH='Y') THEN V_STATUS_CODE:= C_ARCH_STATUS_SUCCESS        ; --#2: Normal condition, validate successfully
        WHEN (I_ALG='N' AND I_ARCH='N') THEN V_STATUS_CODE:= C_ARCH_STATUS_ERROR_NODATA   ; --#4: No action required, notify user no data to archive
      END CASE;

      V_EXIST_IN_OPERATION_MTX := 'N';
      FOR X IN (  SELECT OPERATION_ARCH
                    FROM ILM_OPERATION_MATRIX
                   WHERE TARGET_NAME = I_TARGET_NAME
               )
      LOOP
        V_EXIST_IN_OPERATION_MTX := 'Y';
        V_OPERATION_ARCH := X.OPERATION_ARCH;
      END LOOP;

      IF ( V_EXIST_IN_OPERATION_MTX = 'N') THEN
        O_RET_CODE    := C_FAILURE;
        O_RET_MESSAGE := 'Cannot find information in operation matrix  for target '||  I_TARGET_NAME;
        RETURN;
      END IF;

      -- Allow purge directly from live store if archive operation is not allowed.
      IF ( V_STATUS_CODE = C_ARCH_STATUS_ERROR_NEED_ARCH AND V_OPERATION_ARCH = 'N' ) THEN
        V_STATUS_CODE := C_ARCH_STATUS_SUCCESS;
      END IF;

      V_STATUS_MESSAGE := V_STATUS_CODE||' V_ALG=' ||I_ALG ||','||
                                          'V_ARCH='||I_ARCH;
    END IF;

    O_RET_CODE    := V_STATUS_CODE   ;
    O_RET_MESSAGE := V_STATUS_MESSAGE;
  END VALIDATE_PURG;


  FUNCTION GET_OTHER_ACTIVE_REQUEST_ID(
    I_TARGET_NAME        IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_VALUATION          IN  ILM_REQUESTS.FILTER_VALUATION%TYPE, -- ONLY VALID FOR VALUATION
    I_DATE               IN  ILM_REQUESTS.FILTER_DATE%TYPE,      -- USED TO OPERATE ON DBAUDIT/CORRELATION/PRICEVALUE/VOLATILITY
    I_MY_REQ_ID          IN  ILM_REQUESTS.REQUEST_ID%TYPE
  )
  RETURN ILM_REQUESTS.REQUEST_ID%TYPE
  IS
    V_REQUEST_ID ILM_REQUESTS.REQUEST_ID%TYPE := NULL;
  BEGIN
    CASE I_TARGET_NAME
         WHEN 'VALUATION' THEN SELECT REQUEST_ID INTO V_REQUEST_ID FROM ILM_REQUESTS WHERE TARGET_NAME = UPPER(I_TARGET_NAME) AND FILTER_VALUATION = I_VALUATION AND CURRENT_PHASE != C_PHASE_FINISH_CODE AND REQUEST_ID != I_MY_REQ_ID AND ROWNUM <= 1;
         ELSE                  SELECT REQUEST_ID INTO V_REQUEST_ID FROM ILM_REQUESTS WHERE TARGET_NAME = UPPER(I_TARGET_NAME) AND FILTER_DATE      = I_DATE      AND CURRENT_PHASE != C_PHASE_FINISH_CODE AND REQUEST_ID != I_MY_REQ_ID AND ROWNUM <= 1;
    END  CASE;
    RETURN V_REQUEST_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    WHEN OTHERS THEN
      RAISE;
  END;

  FUNCTION GET_ACTIVE_REQUEST_ID(
    I_TARGET_NAME        IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_VALUATION          IN  ILM_REQUESTS.FILTER_VALUATION%TYPE, -- ONLY VALID FOR VALUATION
    I_DATE               IN  ILM_REQUESTS.FILTER_DATE%TYPE       -- USED TO OPERATE ON DBAUDIT/CORRELATION/PRICEVALUE/VOLATILITY
  )
  RETURN ILM_REQUESTS.REQUEST_ID%TYPE
  IS
    V_REQUEST_ID ILM_REQUESTS.REQUEST_ID%TYPE := NULL;
  BEGIN
    CASE I_TARGET_NAME
         WHEN 'VALUATION' THEN SELECT REQUEST_ID INTO V_REQUEST_ID FROM ILM_REQUESTS WHERE TARGET_NAME = I_TARGET_NAME AND FILTER_VALUATION = I_VALUATION AND CURRENT_PHASE != C_PHASE_FINISH_CODE AND ROWNUM <= 1;
         ELSE                  SELECT REQUEST_ID INTO V_REQUEST_ID FROM ILM_REQUESTS WHERE TARGET_NAME = I_TARGET_NAME AND FILTER_DATE      = I_DATE      AND CURRENT_PHASE != C_PHASE_FINISH_CODE AND ROWNUM <= 1;
    END  CASE;
    RETURN V_REQUEST_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    WHEN OTHERS THEN
      RAISE;
  END;


  -------------------------
  -- INTERFACE SECTION
  -------------------------


  PROCEDURE PROCESS_IN_ARCHIVE(
    I_REQUEST_ID         IN  ILM_REQUESTS.REQUEST_ID%TYPE,
    I_WINDOW_ID          IN  ILM_WINDOWS.WINDOW_ID%TYPE,
    O_RET_CODE                OUT VARCHAR2,                           -- C_SUCCESS, C_NO_DATA_FOUND
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_TARGET_NAME      ILM_REQUESTS.TARGET_NAME%TYPE;
    V_ACTION           ILM_REQUESTS.ACTION%TYPE;
    V_FILTER_VALUATION ILM_REQUESTS.FILTER_VALUATION%TYPE;
    V_FILTER_DATE      ILM_REQUESTS.FILTER_DATE%TYPE;

    V_STEP_ERR_CODE    VARCHAR2(100)  := C_SUCCESS;
    V_STEP_ERR_MSG     VARCHAR2(4000) := '';

    V_VD_ALG            VARCHAR2(100);
    V_VD_ARCH           VARCHAR2(100);

    V_VS_ALG            VARCHAR2(100);
    V_VS_ARCH           VARCHAR2(100);

    V_ALG               VARCHAR2(100);
    V_ARCH              VARCHAR2(100);

    V_WHO_AM_I          VARCHAR2(100);
    V_FILTER_COLUMN     VARCHAR2(40);

    V_ALLOW_ARCHIVE     VARCHAR(10);
    V_VD_PART_CNT       NUMBER;
    V_SQL               VARCHAR2(4000) := '';

    V_CORR_PART_NAME    VARCHAR2(100) := NULL;



    V_ROW_COUNT_VD_ALG           NUMBER;
    V_ROW_COUNT_VD_ARCH          NUMBER;
    V_ROW_COUNT_VS_ALG           NUMBER;
    V_ROW_COUNT_VS_ARCH          NUMBER;
    V_ROW_COUNT_ALG              NUMBER;
    V_ROW_COUNT_ARCH             NUMBER;

    CORR_PARTITION_NOT_FOUND EXCEPTION;
    PRAGMA EXCEPTION_INIT(CORR_PARTITION_NOT_FOUND, -2149);

    V_WINDOW_SECONDS_LEFT        NUMBER;

  BEGIN
    GV_REQ_STEP_ID := 1;

    SELECT ((WINDOW_PLANNED_END-SYSDATE)*24*3600)
      INTO V_WINDOW_SECONDS_LEFT
      FROM ILM_WINDOWS
     WHERE WINDOW_ID = I_WINDOW_ID;

    IF (V_WINDOW_SECONDS_LEFT < 1500) THEN
      LOG_STEP_INFO(
        I_REQUEST_ID => I_REQUEST_ID               ,
        I_PHASE_NAME => C_PHASE_P_ARCH_CODE        ,
        IO_STEP_ID   => GV_REQ_STEP_ID             ,
        I_STEP_NAME  => 'Terminate job before window closes',
        I_ERROR_CODE => C_FAILURE            ,
        I_ERROR_MSG  =>  'Not enough time for window '||I_WINDOW_ID||', terminate this job now, the request will be processed by next window'
        );
      RETURN;

    END IF;


    --Get request info
    BEGIN
      SELECT TARGET_NAME      ,
             ACTION           ,
             FILTER_VALUATION ,
             FILTER_DATE
        INTO
             V_TARGET_NAME      ,
             V_ACTION           ,
             V_FILTER_VALUATION ,
             V_FILTER_DATE
        FROM ILM_REQUESTS
       WHERE REQUEST_ID = I_REQUEST_ID;
    EXCEPTION
      WHEN OTHERS THEN
        V_STEP_ERR_CODE := C_FAILURE;
        V_STEP_ERR_MSG  := 'Failed to fetch request information, req_id:'||I_REQUEST_ID|| ' Message:'||SUBSTR(SQLERRM,1,100);
    END;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => I_REQUEST_ID                              ,
      I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'fetch request information',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );
    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      P_ARCH_FAILED(I_REQUEST_ID);
      RETURN;
    END IF;


    --UPDATE WINDOW STATUS FOR THE REQUEST
    -- update req status to starting operating in archive
    BEGIN
     UPDATE ILM_REQUESTS
        SET PROCESSED_WINDOW_ARCH = I_WINDOW_ID,
            LAST_UPDATE_DATE = SYSDATE
      WHERE REQUEST_ID = I_REQUEST_ID;
     P_ARCH_STARTING(I_REQUEST_ID);
    EXCEPTION
      WHEN OTHERS THEN
        V_STEP_ERR_CODE := C_FAILURE;
        V_STEP_ERR_MSG  := SUBSTR(SQLERRM,1,100);
    END;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => I_REQUEST_ID                              ,
      I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Update request phase status and window info',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );
    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      P_ARCH_FAILED(I_REQUEST_ID);
      RETURN;
    END IF;


    -- refresh data status in archive and allegro
    IF ( V_TARGET_NAME = 'VALUATION' ) THEN
      REFRESH_STATUS_SINGLE( I_TARGET_NAME   => V_TARGET_NAME     ,
                             I_TARGET_FILTER => V_FILTER_VALUATION,
                             I_MY_REQUEST_ID => I_REQUEST_ID      ,
                             O_RET_CODE      => V_STEP_ERR_CODE   ,
                             O_RET_MESSAGE   => V_STEP_ERR_MSG
                            );
    ELSE
      REFRESH_STATUS_SINGLE( I_TARGET_NAME   => V_TARGET_NAME,
                             I_TARGET_FILTER => TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD'),
                             I_MY_REQUEST_ID => I_REQUEST_ID      ,
                             O_RET_CODE      => V_STEP_ERR_CODE   ,
                             O_RET_MESSAGE   => V_STEP_ERR_MSG
                            );
    END IF;


    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => I_REQUEST_ID                              ,
      I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Refresh status',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );
    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      P_ARCH_FAILED(I_REQUEST_ID);
      RETURN;
    END IF;

    -- validate data status is applicable for the operation

    --GET ARCHIVE STATUS
    IF ( V_TARGET_NAME = 'VALUATION' ) THEN
      GET_ARCHIVE_STATUS(
                          I_TABLE_NAME        => 'VALUATIONDETAIL' ,
                          I_FILTER_VALUATION  => V_FILTER_VALUATION,
                          I_FILTER_DATE       => NULL              ,
                          O_IN_ALG            => V_VD_ALG          ,
                          O_IN_ARCH           => V_VD_ARCH         ,
                          O_RET_CODE          => V_STEP_ERR_CODE   ,
                          O_RET_MESSAGE       => V_STEP_ERR_MSG
                        );

      IF ( V_STEP_ERR_CODE = C_SUCCESS) THEN
        GET_ARCHIVE_STATUS(
                            I_TABLE_NAME        => 'VALUATIONSUMMARY' ,
                            I_FILTER_VALUATION  => V_FILTER_VALUATION,
                            I_FILTER_DATE       => NULL              ,
                            O_IN_ALG            => V_VS_ALG          ,
                            O_IN_ARCH           => V_VS_ARCH         ,
                            O_RET_CODE          => V_STEP_ERR_CODE   ,
                            O_RET_MESSAGE       => V_STEP_ERR_MSG
                          );
      END IF;
    ELSE
        GET_ARCHIVE_STATUS(
                            I_TABLE_NAME        => V_TARGET_NAME      ,
                            I_FILTER_VALUATION  => NULL               ,
                            I_FILTER_DATE       => V_FILTER_DATE      ,
                            O_IN_ALG            => V_ALG              ,
                            O_IN_ARCH           => V_ARCH             ,
                            O_RET_CODE          => V_STEP_ERR_CODE    ,
                            O_RET_MESSAGE       => V_STEP_ERR_MSG
                          );
    END IF;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => I_REQUEST_ID                              ,
      I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Get archive status',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );
    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      P_ARCH_FAILED(I_REQUEST_ID);
      RETURN;
    END IF;

    -- validate action can be applied to this status
    CASE      V_ACTION
         WHEN 'ARCH' THEN VALIDATE_ARCH( I_TARGET_NAME   => V_TARGET_NAME   ,
                                         I_VD_ALG        => V_VD_ALG   ,
                                         I_VD_ARCH       => V_VD_ARCH  ,
                                         I_VS_ALG        => V_VS_ALG   ,
                                         I_VS_ARCH       => V_VS_ARCH  ,
                                         I_ALG           => V_ALG      ,
                                         I_ARCH          => V_ARCH     ,
                                         O_RET_CODE      => V_STEP_ERR_CODE ,
                                         O_RET_MESSAGE   => V_STEP_ERR_MSG);
         WHEN 'RSTR' THEN VALIDATE_RSTR( I_TARGET_NAME   => V_TARGET_NAME   ,
                                         I_VD_ALG        => V_VD_ALG   ,
                                         I_VD_ARCH       => V_VD_ARCH  ,
                                         I_VS_ALG        => V_VS_ALG   ,
                                         I_VS_ARCH       => V_VS_ARCH  ,
                                         I_ALG           => V_ALG      ,
                                         I_ARCH          => V_ARCH     ,
                                         O_RET_CODE      => V_STEP_ERR_CODE ,
                                         O_RET_MESSAGE   => V_STEP_ERR_MSG);
         WHEN 'PURG' THEN VALIDATE_PURG( I_TARGET_NAME   => V_TARGET_NAME   ,
                                         I_VD_ALG        => V_VD_ALG   ,
                                         I_VD_ARCH       => V_VD_ARCH  ,
                                         I_VS_ALG        => V_VS_ALG   ,
                                         I_VS_ARCH       => V_VS_ARCH  ,
                                         I_ALG           => V_ALG      ,
                                         I_ARCH          => V_ARCH     ,
                                         O_RET_CODE      => V_STEP_ERR_CODE ,
                                         O_RET_MESSAGE   => V_STEP_ERR_MSG);
    END CASE;


    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => I_REQUEST_ID                              ,
      I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Validate status is valid for this operation in archive',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );


    --Warn can proceed, regarded as success
    IF ( V_STEP_ERR_CODE = C_ARCH_STATUS_SUCCESS_WARN) THEN
      V_STEP_ERR_CODE := C_SUCCESS;
    END IF;

    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      P_ARCH_FAILED(I_REQUEST_ID);
      RETURN;
    END IF;

    --Update ILM archive status for the entry, after this point, recovery might be required
    --From this point, archive status might be in fuzzy state which might need further correction
    -- updating the request information can help to recover from all those fuzzy situations
    BEGIN
      IF (V_TARGET_NAME = 'VALUATION') THEN
        UPDATE ILM_ARCHIVE_STATUS
           SET LAST_OPERATION_ID = I_REQUEST_ID
         WHERE TABLE_NAME IN ('VALUATIONDETAIL','VALUATIONSUMMARY')
           AND NVL(VALUATION  ,-1) = NVL(V_FILTER_VALUATION,-1) ;
        COMMIT;
      ELSE
        UPDATE ILM_ARCHIVE_STATUS
           SET LAST_OPERATION_ID = I_REQUEST_ID
         WHERE TABLE_NAME = V_TARGET_NAME
           AND NVL(TARGET_DATE  , TO_DATE('1900-01-01','yyyy-mm-dd')) =
               NVL(V_FILTER_DATE, TO_DATE('1900-01-01','yyyy-mm-dd'));
        COMMIT;
      END IF;
      V_STEP_ERR_CODE := C_SUCCESS;
      V_STEP_ERR_MSG := '';
    EXCEPTION
      WHEN OTHERS THEN
        V_STEP_ERR_CODE := C_FAILURE;
        V_STEP_ERR_MSG  := SUBSTR(SQLERRM,1,100);
    END;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => I_REQUEST_ID                              ,
      I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Put this request as last operation on the archive item',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );
    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      P_ARCH_FAILED(I_REQUEST_ID);
      RETURN;
    END IF;

    -- start operating on the data in the archive

    SELECT FILTER_COLUMN
      INTO V_FILTER_COLUMN
      FROM ILM_OPERATION_MATRIX
     WHERE TARGET_NAME = V_TARGET_NAME;

    IF     ( V_ACTION = 'ARCH' ) THEN
      -- ARCHIVE OPERATION
      BEGIN
        -- ARCHIVE ON THE REPORTING SIDE
        BEGIN
          ALLEGRO_ILM_ARCHIVE.DO_ARCH@DBL_REPORTING(
            I_FILTER_COLUMN     => V_FILTER_COLUMN   ,
            I_TARGET_NAME       => V_TARGET_NAME     ,
            I_FILTER_VALUATION  => V_FILTER_VALUATION,
            I_FILTER_DATE       => V_FILTER_DATE     ,
            I_REQUEST_ID          => I_REQUEST_ID  );
          SELECT RET_CODE, RET_MESSAGE
            INTO V_STEP_ERR_CODE, V_STEP_ERR_MSG
            FROM ILM_ARCHIVE_REQ_STATUS@DBL_REPORTING
           WHERE REQUEST_ID = I_REQUEST_ID;
        EXCEPTION
          WHEN OTHERS THEN
            V_STEP_ERR_CODE    := C_FAILURE;
            V_STEP_ERR_MSG := 'Failed to operate on archive side, error message:'||  SUBSTR(SQLERRM,1,100);
        END;

        --log info
        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'archive on the reporting database side',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;


        -- get # of rows in alg and arch
        BEGIN
          IF ( V_TARGET_NAME = 'VALUATION' ) THEN
            SELECT /*+ PARALLEL(4) */ COUNT(*) INTO V_ROW_COUNT_VD_ALG  FROM ALLEGRO.VALUATIONDETAIL       WHERE VALUATION = V_FILTER_VALUATION;
            SELECT /*+ PARALLEL(4) */ COUNT(*) INTO V_ROW_COUNT_VD_ARCH FROM VALUATIONDETAIL@DBL_REPORTING WHERE VALUATION = V_FILTER_VALUATION;
            SELECT COUNT(*) INTO V_ROW_COUNT_VS_ALG  FROM ALLEGRO.VALUATIONSUMMARY       WHERE VALUATION = V_FILTER_VALUATION;
            SELECT COUNT(*) INTO V_ROW_COUNT_VS_ARCH FROM VALUATIONSUMMARY@DBL_REPORTING WHERE VALUATION = V_FILTER_VALUATION;
          ELSE
            V_SQL := 'SELECT COUNT(*) FROM ALLEGRO.'||V_TARGET_NAME ||
                     ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL INTO V_ROW_COUNT_ALG;

            V_SQL := 'SELECT COUNT(*) FROM '||V_TARGET_NAME ||'@DBL_REPORTING '||
                     ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL INTO V_ROW_COUNT_ARCH;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            V_STEP_ERR_CODE    := C_FAILURE;
            V_STEP_ERR_MSG := 'Failed to compare # of rows from alg and arch , error message:'||  SUBSTR(SQLERRM,1,100);
        END;

        --log info
        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'get # of rows from arch and alg',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;


        -- compare # of rows in alg and arch, matched can proceed
        IF ( ( NVL(V_ROW_COUNT_VD_ALG,-1) <> NVL(V_ROW_COUNT_VD_ARCH,-1) ) OR
             ( NVL(V_ROW_COUNT_VS_ALG,-1) <> NVL(V_ROW_COUNT_VS_ARCH,-1) ) OR
             ( NVL(V_ROW_COUNT_ALG   ,-1) <> NVL(V_ROW_COUNT_ARCH   ,-1) ) )
        THEN
          V_STEP_ERR_CODE    := C_FAILURE;
          V_STEP_ERR_MSG := '# of rows for '||V_TARGET_NAME||' in arch and alg does not match';
        ELSE
          V_STEP_ERR_CODE    := C_SUCCESS;
          V_STEP_ERR_MSG := '# of rows for '||V_TARGET_NAME||' in arch and alg DOES match';
        END IF;

        --log info
        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'compare # of rows from arch and alg',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;

        -- CLEANUP THE LIVE STORE, EXCEPT FOR THE VALUATIONDETAIL TABLE
        BEGIN
          IF ( V_TARGET_NAME = 'VALUATION' ) THEN

            DELETE FROM ALLEGRO.VALUATIONSUMMARY
             WHERE VALUATION = V_FILTER_VALUATION;
            --LEAVE VD TO THE CALLER PROCESS

          ELSE
            V_SQL := 'DELETE FROM ALLEGRO.'||V_TARGET_NAME ||
                     ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL;
          END IF;
          COMMIT;
          V_STEP_ERR_CODE    := C_SUCCESS;
          V_STEP_ERR_MSG := 'cleanup the live store';
        EXCEPTION
          WHEN OTHERS THEN
            V_STEP_ERR_CODE    := C_FAILURE;
            V_STEP_ERR_MSG := 'Failed to cleanup the live store after working on archive side, error message:'||  SUBSTR(SQLERRM,1,100);
        END;

        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'cleanup the live store after working on archive side',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;

      EXCEPTION
        WHEN OTHERS THEN
          O_RET_CODE    := C_FAILURE;
          O_RET_MESSAGE :=  'Unexpected exception, error message:'||  SUBSTR(SQLERRM,1,100);
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
      END;
    ELSIF  ( V_ACTION = 'RSTR' ) THEN
      -- RESTORE OPERATION
      BEGIN


        --VALUATION
        IF ( V_TARGET_NAME = 'VALUATION' ) THEN
          SELECT COUNT(*)
            INTO V_VD_PART_CNT
            FROM DBA_TAB_PARTITIONS
           WHERE TABLE_OWNER='ALLEGRO'
             AND TABLE_NAME = 'VALUATIONDETAIL'
             AND PARTITION_NAME = 'P_'|| V_FILTER_VALUATION;

          --partition not exist
          IF ( V_VD_PART_CNT = 0 ) THEN
            BEGIN
              EXECUTE IMMEDIATE '  ALTER TABLE ALLEGRO.VALUATIONDETAIL '||
                                '    ADD PARTITION P_' || V_FILTER_VALUATION ||
                                ' VALUES ('''|| V_FILTER_VALUATION ||''') TABLESPACE ALLEGRO';
              V_STEP_ERR_CODE    := C_SUCCESS;
              V_STEP_ERR_MSG := 'Adding partition to VD table: P_'||V_FILTER_VALUATION ;
            EXCEPTION
              WHEN OTHERS THEN
                V_STEP_ERR_CODE    := C_FAILURE;
                V_STEP_ERR_MSG := 'Failed to add partition P_'||V_FILTER_VALUATION ||'into VD table, error message:'||  SUBSTR(SQLERRM,1,100);
            END;

          -- partition already exist
          ELSE
              V_STEP_ERR_CODE    := C_SUCCESS;
              V_STEP_ERR_MSG := 'Partition P_'||V_FILTER_VALUATION ||' already exists in VD table' ;
          END IF;

          --log info
          LOG_STEP_INFO(
            I_REQUEST_ID => I_REQUEST_ID                     ,
            I_PHASE_NAME => C_PHASE_P_ARCH_CODE              ,
            IO_STEP_ID   => GV_REQ_STEP_ID                   ,
            I_STEP_NAME  => 'creating partition for VD table',
            I_ERROR_CODE => V_STEP_ERR_CODE                  ,
            I_ERROR_MSG  => V_STEP_ERR_MSG
            );

          IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
            O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
            O_RET_MESSAGE := V_STEP_ERR_MSG;
            P_ARCH_FAILED(I_REQUEST_ID);
            RETURN;
          END IF;


          BEGIN
            INSERT /*+ APPEND */ INTO ALLEGRO.VALUATIONDETAIL  SELECT * FROM  VALUATIONDETAIL@DBL_REPORTING WHERE VALUATION=V_FILTER_VALUATION;
            COMMIT;
            INSERT               INTO ALLEGRO.VALUATIONSUMMARY SELECT * FROM VALUATIONSUMMARY@DBL_REPORTING WHERE VALUATION=V_FILTER_VALUATION;
            COMMIT;
            V_STEP_ERR_CODE    := C_SUCCESS;
            V_STEP_ERR_MSG := 'Put data back into VD/VS tables';
          EXCEPTION
            WHEN OTHERS THEN
              V_STEP_ERR_CODE    := C_FAILURE;
              V_STEP_ERR_MSG := 'Load data into VD/VS tables from archive, error message:'||  SUBSTR(SQLERRM,1,100);
          END;


        -- OTHER TABLES TO RESTORE
        ELSE
          BEGIN
            V_SQL := ' INSERT INTO ALLEGRO.'||V_TARGET_NAME||
                     ' SELECT * FROM '||V_TARGET_NAME||'@DBL_REPORTING '||
                     '  WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '    AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL;
            COMMIT;
            O_RET_CODE    := C_SUCCESS;
            O_RET_MESSAGE := 'SUCCESSFULLY LOADING DATA INTO LIVE STORE';
          EXCEPTION
            WHEN OTHERS THEN
              V_STEP_ERR_CODE    := C_FAILURE;
              V_STEP_ERR_MSG := 'Experience failure when loading data into live store, error message:'||SUBSTR(SQLERRM, 1, 100);
          END;
        END IF;


        --log info
        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'Load data into live store from archive',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;

        -- get # of rows in alg and arch
        BEGIN
          IF ( V_TARGET_NAME = 'VALUATION' ) THEN
            SELECT /*+ PARALLEL(4) */ COUNT(*) INTO V_ROW_COUNT_VD_ALG  FROM ALLEGRO.VALUATIONDETAIL       WHERE VALUATION = V_FILTER_VALUATION;
            SELECT /*+ PARALLEL(4) */ COUNT(*) INTO V_ROW_COUNT_VD_ARCH FROM VALUATIONDETAIL@DBL_REPORTING WHERE VALUATION = V_FILTER_VALUATION;
            SELECT COUNT(*) INTO V_ROW_COUNT_VS_ALG  FROM ALLEGRO.VALUATIONSUMMARY       WHERE VALUATION = V_FILTER_VALUATION;
            SELECT COUNT(*) INTO V_ROW_COUNT_VS_ARCH FROM VALUATIONSUMMARY@DBL_REPORTING WHERE VALUATION = V_FILTER_VALUATION;
          ELSE
            V_SQL := 'SELECT COUNT(*) FROM ALLEGRO.'||V_TARGET_NAME ||
                     ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL INTO V_ROW_COUNT_ALG;

            V_SQL := 'SELECT COUNT(*) FROM '||V_TARGET_NAME ||'@DBL_REPORTING '||
                     ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL INTO V_ROW_COUNT_ARCH;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            V_STEP_ERR_CODE    := C_FAILURE;
            V_STEP_ERR_MSG := 'Failed to compare # of rows from alg and arch , error message:'||  SUBSTR(SQLERRM,1,100);
        END;

        --log info
        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'get # of rows from arch and alg',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;


        -- compare # of rows in alg and arch, matched can proceed
        IF ( ( NVL(V_ROW_COUNT_VD_ALG,-1) <> NVL(V_ROW_COUNT_VD_ARCH,-1) AND NVL(V_ROW_COUNT_VD_ARCH,-1) != 0 ) OR
             ( NVL(V_ROW_COUNT_VS_ALG,-1) <> NVL(V_ROW_COUNT_VS_ARCH,-1) AND NVL(V_ROW_COUNT_VS_ARCH,-1) != 0 ) OR
             ( NVL(V_ROW_COUNT_ALG   ,-1) <> NVL(V_ROW_COUNT_ARCH   ,-1) AND NVL(V_ROW_COUNT_ARCH   ,-1) != 0 ) )
        THEN
          V_STEP_ERR_CODE    := C_FAILURE;
          V_STEP_ERR_MSG := '# of rows for '||V_TARGET_NAME||' in arch and alg does not match, VD-L|VD-A|VS-L|VS-A|L|S:'||
                            V_ROW_COUNT_VD_ALG ||'|'|| V_ROW_COUNT_VD_ARCH ||'|'||
                            V_ROW_COUNT_VS_ALG ||'|'|| V_ROW_COUNT_VS_ARCH ||'|'||
                            V_ROW_COUNT_ALG    ||'|'|| V_ROW_COUNT_ARCH    ;
        ELSE
          V_STEP_ERR_CODE    := C_SUCCESS;
          V_STEP_ERR_MSG := '# of rows for '||V_TARGET_NAME||' in arch and alg DOES match, VD-L|VD-A|VS-L|VS-A|L|S:'||
                            V_ROW_COUNT_VD_ALG ||'|'|| V_ROW_COUNT_VD_ARCH ||'|'||
                            V_ROW_COUNT_VS_ALG ||'|'|| V_ROW_COUNT_VS_ARCH ||'|'||
                            V_ROW_COUNT_ALG    ||'|'|| V_ROW_COUNT_ARCH    ;
        END IF;



        --log info
        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'compare # of rows from arch and alg',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;



        -- Purge data from archive store after successfully restoring the data into live store
        BEGIN
          ALLEGRO_ILM_ARCHIVE.DO_RSTR@DBL_REPORTING(
            I_FILTER_COLUMN     => V_FILTER_COLUMN   ,
            I_TARGET_NAME       => V_TARGET_NAME     ,
            I_FILTER_VALUATION  => V_FILTER_VALUATION,
            I_FILTER_DATE       => V_FILTER_DATE     ,
            I_REQUEST_ID          => I_REQUEST_ID  );
          SELECT RET_CODE, RET_MESSAGE
            INTO V_STEP_ERR_CODE, V_STEP_ERR_MSG
            FROM ILM_ARCHIVE_REQ_STATUS@DBL_REPORTING
           WHERE REQUEST_ID = I_REQUEST_ID;
        EXCEPTION
          WHEN OTHERS THEN
            V_STEP_ERR_CODE    := C_FAILURE;
            V_STEP_ERR_MSG := 'Failed to remove data from archive after restoring into live store, error message:'||  SUBSTR(SQLERRM,1,100);
        END;

        --log info
        LOG_STEP_INFO(
          I_REQUEST_ID => I_REQUEST_ID                              ,
          I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
          IO_STEP_ID   => GV_REQ_STEP_ID                            ,
          I_STEP_NAME  => 'Purge data from archive store after successfully restoring the data into live store',
          I_ERROR_CODE => V_STEP_ERR_CODE                       ,
          I_ERROR_MSG  => V_STEP_ERR_MSG
          );

        IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
          O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
          O_RET_MESSAGE := V_STEP_ERR_MSG;
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
        END IF;

      EXCEPTION
        WHEN OTHERS THEN
          O_RET_CODE    := C_FAILURE;
          O_RET_MESSAGE :=  'Unexpected exception, error message:'||  SUBSTR(SQLERRM,1,100);
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
      END;

    -- Purge operation
    ELSIF  ( V_ACTION = 'PURG' ) THEN

      V_STEP_ERR_CODE    := C_SUCCESS;

      --decide which side to purge
      BEGIN
        SELECT OPERATION_ARCH
          INTO V_ALLOW_ARCHIVE
          FROM ILM_OPERATION_MATRIX
         WHERE TARGET_NAME = V_TARGET_NAME;

      EXCEPTION
        WHEN OTHERS THEN
          O_RET_CODE    := C_FAILURE;
          O_RET_MESSAGE :=  'failed to get archive flag in ILM_OPERATION_MATRIX for target '||V_TARGET_NAME||', error message:'||  SUBSTR(SQLERRM,1,100);
          P_ARCH_FAILED(I_REQUEST_ID);
          RETURN;
      END;

      --log info
      LOG_STEP_INFO(
        I_REQUEST_ID => I_REQUEST_ID                              ,
        I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
        IO_STEP_ID   => GV_REQ_STEP_ID                            ,
        I_STEP_NAME  => 'Get archive flag in ILM_OPERATION_MATRIX for target '||V_TARGET_NAME,
        I_ERROR_CODE => V_STEP_ERR_CODE                       ,
        I_ERROR_MSG  => V_STEP_ERR_MSG
        );

      IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
        O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
        O_RET_MESSAGE := V_STEP_ERR_MSG;
        P_ARCH_FAILED(I_REQUEST_ID);
        RETURN;
      END IF;


      IF ( V_ALLOW_ARCHIVE = 'Y' ) THEN
        -- Purge from arch store
        BEGIN
          ALLEGRO_ILM_ARCHIVE.DO_PURG@DBL_REPORTING(
            I_FILTER_COLUMN     => V_FILTER_COLUMN   ,
            I_TARGET_NAME       => V_TARGET_NAME     ,
            I_FILTER_VALUATION  => V_FILTER_VALUATION,
            I_FILTER_DATE       => V_FILTER_DATE     ,
            I_REQUEST_ID          => I_REQUEST_ID  );
          SELECT RET_CODE, RET_MESSAGE
            INTO V_STEP_ERR_CODE, V_STEP_ERR_MSG
            FROM ILM_ARCHIVE_REQ_STATUS@DBL_REPORTING
           WHERE REQUEST_ID = I_REQUEST_ID;
        EXCEPTION
          WHEN OTHERS THEN
            V_STEP_ERR_CODE    := C_FAILURE;
            V_STEP_ERR_MSG := 'Failed to purge archive, error message:'||  SUBSTR(SQLERRM,1,100);
        END;
      ELSE --purge from live store
        BEGIN
          IF ( V_TARGET_NAME = 'CORRELATION' ) THEN
            BEGIN
              EXECUTE IMMEDIATE  'ALTER TABLE ALLEGRO.CORRELATION '||
                                 ' DROP PARTITION '||
                                 ' FOR (TO_DATE('''|| TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD')||''', ''YYYY-MM-DD''))';
              V_STEP_ERR_CODE    := C_SUCCESS;
              V_STEP_ERR_MSG     := 'successfully drop partition';
            EXCEPTION
              WHEN CORR_PARTITION_NOT_FOUND THEN --IGNORE!
                V_STEP_ERR_CODE    := C_SUCCESS;
                V_STEP_ERR_MSG := 'Correlation partition not exist for '|| TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD');
              WHEN OTHERS THEN
                RAISE;
            END;
          ELSE
            V_SQL := 'DELETE FROM ALLEGRO.'|| V_TARGET_NAME   ||
                     ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(V_FILTER_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL;
            COMMIT;
            V_STEP_ERR_CODE    := C_SUCCESS;
            V_STEP_ERR_MSG := 'SUCCESSFULLY PURGED from live store.';
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            V_STEP_ERR_CODE  := C_FAILURE;
            V_STEP_ERR_MSG   := 'Experience failure when deleting data, error message:'||SUBSTR(SQLERRM, 1, 100);
        END;
      END IF;

      --log info
      LOG_STEP_INFO(
        I_REQUEST_ID => I_REQUEST_ID                              ,
        I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
        IO_STEP_ID   => GV_REQ_STEP_ID                            ,
        I_STEP_NAME  => 'Purge in archive' ,
        I_ERROR_CODE => V_STEP_ERR_CODE                       ,
        I_ERROR_MSG  => V_STEP_ERR_MSG
        );

      IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
        O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
        O_RET_MESSAGE := V_STEP_ERR_MSG;
        P_ARCH_FAILED(I_REQUEST_ID);
        RETURN;
      END IF;

    ELSE -- cannnot recognize operation!
      --log info
      LOG_STEP_INFO(
        I_REQUEST_ID => I_REQUEST_ID                              ,
        I_PHASE_NAME => C_PHASE_P_ARCH_CODE                       ,
        IO_STEP_ID   => GV_REQ_STEP_ID                            ,
        I_STEP_NAME  => 'should not happen here, operation is not ARCH/PURG/RSTR, get:' || V_ACTION,
        I_ERROR_CODE => V_STEP_ERR_CODE                       ,
        I_ERROR_MSG  => V_STEP_ERR_MSG
        );

      IF ( V_STEP_ERR_CODE != C_SUCCESS) THEN
        O_RET_CODE    := C_STATUS_CODE_FAIL_P_ARCH;
        O_RET_MESSAGE :='should not happen here, operation is not ARCH/PURG/RSTR, get:' || V_ACTION;
        P_ARCH_FAILED(I_REQUEST_ID);
        RETURN;
      END IF;
    END IF;




    --Last step: update status as finished in archive side
    IF ( V_STEP_ERR_CODE = C_SUCCESS ) THEN
      BEGIN
        P_ARCH_SUCCEEDED(I_REQUEST_ID);
        O_RET_CODE    := C_STATUS_CODE_SUCCESS_P_ARCH;
        O_RET_MESSAGE :='Successfully finished';
      EXCEPTION
        WHEN OTHERS THEN
          O_RET_CODE    := C_FAILURE;
          O_RET_MESSAGE := 'Failed to update request status as successfully finished on the archive side';
      END;
      LOG_STEP_INFO(
        I_REQUEST_ID => I_REQUEST_ID                              ,
        I_PHASE_NAME => C_PHASE_P_ARCH_CODE                    ,
        IO_STEP_ID   => GV_REQ_STEP_ID                            ,
        I_STEP_NAME  => 'Request completed in archive side, updating request status',
        I_ERROR_CODE => O_RET_CODE                       ,
        I_ERROR_MSG  => O_RET_MESSAGE
        );
    END IF;

  END PROCESS_IN_ARCHIVE;


  PROCEDURE PROCESS_IN_ALLEGRO(
    I_REQUEST_ID         IN  ILM_REQUESTS.REQUEST_ID%TYPE,
    O_RET_CODE                OUT VARCHAR2,                           -- C_SUCCESS, C_NO_DATA_FOUND
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
  BEGIN
    NULL;

    --Get request info

    -- update req status to starting arch

  END PROCESS_IN_ALLEGRO;

  PROCEDURE PROCESS_IN_ARCHIVE(
    I_REQUEST_ID  IN  ILM_REQUESTS.REQUEST_ID%TYPE,
    I_WINDOW_ID   IN  ILM_WINDOWS.WINDOW_ID%TYPE
  )
  IS
    V_RET_CODE           VARCHAR2(100);
    V_RET_MESSAGE        VARCHAR2(4000);
  BEGIN
    PROCESS_IN_ARCHIVE(
      I_REQUEST_ID  => I_REQUEST_ID  ,
      I_WINDOW_ID   => I_WINDOW_ID   ,
      O_RET_CODE    => V_RET_CODE    ,
      O_RET_MESSAGE => V_RET_MESSAGE
    );
  END PROCESS_IN_ARCHIVE;

  -- Cancel Request, form
  PROCEDURE  CANCEL_REQUEST(
    I_CNCL_REQUEST_ID         IN  ILM_REQUESTS.REQUEST_ID%TYPE,
    I_CANCELLED_BY            IN  ILM_REQUESTS.CANCELLED_BY%TYPE,
    O_RET_CODE                OUT VARCHAR2,                           -- C_SUCCESS, C_NO_DATA_FOUND
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_UPDATED CHAR := 'N';
  BEGIN
    FOR X IN (SELECT CURRENT_PHASE,PHASE_STATUS FROM ILM_REQUESTS WHERE REQUEST_ID = I_CNCL_REQUEST_ID)
    LOOP
      IF ( X.CURRENT_PHASE != C_PHASE_STAGE_CODE ) THEN
        O_RET_CODE := C_FAILURE;
        O_RET_MESSAGE := 'Cannot cancel ongoing or finished request, current stage for request '|| I_CNCL_REQUEST_ID||': '||X.CURRENT_PHASE;
        RETURN;
      END IF;
      IF ( X.PHASE_STATUS != C_STATUS_CODE_SUCCESS_STAGE ) THEN
        O_RET_CODE := C_FAILURE;
        O_RET_MESSAGE := 'Only successful staged request can be cancelled, stage status for '|| I_CNCL_REQUEST_ID||': '||X.PHASE_STATUS;
        RETURN;
      END IF;
      UPDATE ILM_REQUESTS
         SET CURRENT_PHASE = 'FINISH',
             PHASE_STATUS  = 'CANCELLED',
             CANCELLED_BY  = I_CANCELLED_BY,
             CANCELLED_TIME = SYSDATE,
           LAST_UPDATE_DATE = SYSDATE
       WHERE REQUEST_ID = I_CNCL_REQUEST_ID;
      COMMIT;
      V_UPDATED := 'Y';
    END LOOP;

    IF ( V_UPDATED = 'N' ) THEN
      O_RET_CODE := C_FAILURE;
      O_RET_MESSAGE := 'Cannot find specified request id in the request table, request id: '|| I_CNCL_REQUEST_ID;
      RETURN;
    END IF;

    O_RET_CODE := C_SUCCESS;
    O_RET_MESSAGE := 'Request cancelled:'||I_CNCL_REQUEST_ID;
  END CANCEL_REQUEST;

  PROCEDURE  CANCEL_REQUEST(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_CNCL_VALUATION          IN  ILM_REQUESTS.FILTER_VALUATION%TYPE, -- ONLY VALID FOR VALUATION
    I_CNCL_DATE               IN  ILM_REQUESTS.FILTER_DATE%TYPE,      -- USED TO OPERATE ON DBAUDIT/CORRELATION/PRICEVALUE/VOLATILITY
    I_CANCELLED_BY            IN  ILM_REQUESTS.CANCELLED_BY%TYPE,
    O_RET_CODE                OUT VARCHAR2,                           -- S_0:Success, S_2:Failed
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_REQUEST_ID ILM_REQUESTS.REQUEST_ID%TYPE;
  BEGIN
    V_REQUEST_ID := GET_ACTIVE_REQUEST_ID(
      I_TARGET_NAME    => I_TARGET_NAME    ,
      I_VALUATION      => I_CNCL_VALUATION ,
      I_DATE           => I_CNCL_DATE
    );

    IF ( V_REQUEST_ID IS NULL ) THEN
      O_RET_CODE := C_REQ_ID_NOT_EXIST;
      O_RET_MESSAGE := 'Cannot find the request through the condition specified:'||I_TARGET_NAME||'('||I_CNCL_VALUATION||TO_CHAR(I_CNCL_DATE,'YYYY-MM-DD')||')';
      RETURN;
    END IF;

    CANCEL_REQUEST(
      I_CNCL_REQUEST_ID    => V_REQUEST_ID  ,
      I_CANCELLED_BY       => I_CANCELLED_BY,
      O_RET_CODE           => O_RET_CODE    ,
      O_RET_MESSAGE        => O_RET_MESSAGE
    );
  END CANCEL_REQUEST;

  PROCEDURE  PUT_REQUEST(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_ACTION                  IN  ILM_REQUESTS.ACTION%TYPE,           -- ARCH/RSTR/PURG
    I_FILTER_VALUATION        IN  ILM_REQUESTS.FILTER_VALUATION%TYPE, -- ONLY VALID FOR VALUATION
    I_FILTER_DATE             IN  ILM_REQUESTS.FILTER_DATE%TYPE,      -- USED TO OPERATE ON DBAUDIT/CORRELATION/PRICEVALUE/VOLATILITY, FORMAT 'YYYY-MM-DD'
    I_REQUEST_BY              IN  ILM_REQUESTS.REQUEST_BY%TYPE,
    I_OVERRIDE_OTHER_REQUEST  IN  ILM_REQUESTS.OVERRIDE_OTHER_REQUEST%TYPE, -- [Y|N], DEFAULT N, ONLY ONE ENTRY CAN BE ACTIVE FOR I_TARGETNAME+[I_VALUATION|I_DATE], SET TO Y WILL CALCEL OTHER REQUEST
    O_REQUEST_ID              OUT ILM_REQUESTS.REQUEST_ID%TYPE,
    O_RET_CODE                OUT VARCHAR2,                                 -- S_0:Success, S_2:Failed
    O_RET_MESSAGE             OUT VARCHAR2
  )
  AS
    V_REQ_ID                 ILM_REQUESTS.REQUEST_ID%TYPE;
    V_OTHER_REQ_ID           ILM_REQUESTS.REQUEST_ID%TYPE;
    V_TARGET_NAME            ILM_REQUESTS.TARGET_NAME%TYPE;
    V_ACTION                 ILM_REQUESTS.ACTION%TYPE;
    V_FILTER_VALUATION       ILM_REQUESTS.FILTER_VALUATION%TYPE;
    V_FILTER_DATE            ILM_REQUESTS.FILTER_DATE%TYPE;
    V_REQUEST_BY             ILM_REQUESTS.REQUEST_BY%TYPE;
    V_OVERRIDE_OTHER_REQUEST ILM_REQUESTS.OVERRIDE_OTHER_REQUEST%TYPE;

    V_STEP_ERR_CODE          ILM_REQUEST_DETAILS.ERROR_CODE%TYPE;
    V_STEP_ERR_MSG           VARCHAR2(4000);

    V_SQL_ERR_NUM            NUMBER;
    V_SQL_ERR_MSG            VARCHAR2(4000);

    V_TARGET_EXISTS          CHAR := 'N';
    V_ACTION_ALLOWED         CHAR := 'N';

    V_VALID_VALUTION_NUMBER  NUMBER;
    V_LOCKVALUATION          NUMBER;
    V_IS_A_VALID_DATE        DATE;

    V_VD_ALG            VARCHAR2(100);
    V_VD_ARCH           VARCHAR2(100);

    V_VS_ALG            VARCHAR2(100);
    V_VS_ARCH           VARCHAR2(100);

    V_ALG               VARCHAR2(100);
    V_ARCH              VARCHAR2(100);

  BEGIN
    --Initialization
    V_TARGET_NAME := UPPER(I_TARGET_NAME);
    V_ACTION      := UPPER(I_ACTION);
    V_REQUEST_BY  := UPPER(I_REQUEST_BY);
    V_OVERRIDE_OTHER_REQUEST := UPPER(I_OVERRIDE_OTHER_REQUEST);
    O_RET_CODE := C_STATUS_CODE_FAIL_STAGE; --FAILED BY DEFAULE, ONLY CHANGE TO S_0 WHEN IF PASSING ALL THE STEPS
    GV_REQ_STEP_ID := 1;



    -- generate request id
    SELECT SEQ_REQUEST_ID.NEXTVAL INTO V_REQ_ID FROM DUAL;
    O_REQUEST_ID := V_REQ_ID;


    -- START PROCESSING
    INSERT INTO ILM_REQUESTS(
      REQUEST_ID            ,
      TARGET_NAME           ,
      ACTION                ,
      FILTER_VALUATION      ,
      FILTER_DATE           ,
      REQUEST_BY            ,
      REQUEST_TIME          ,
      OVERRIDE_OTHER_REQUEST,
      LAST_UPDATE_DATE      ,
      CURRENT_PHASE         ,
      PHASE_STATUS          )
    VALUES (
      V_REQ_ID                  , -- REQUEST_ID
      V_TARGET_NAME             , -- TARGET_NAME
      V_ACTION                  , -- ACTION
      I_FILTER_VALUATION        , -- FILTER_VALUATION
      I_FILTER_DATE             , -- FILTER_DATE
      I_REQUEST_BY              , -- REQUEST_BY
      SYSDATE                   , -- REQUEST_TIME
      I_OVERRIDE_OTHER_REQUEST  , -- OVERRIDE_OTHER_REQUEST
      SYSDATE                   , -- LAST_UPDATE_DATE
      C_PHASE_STAGE_CODE        , -- CURRENT_PHASE
      C_STATUS_CODE_START_STAGE   -- PHASE_STATUS
    );
    COMMIT;

    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Stage instruction into request table',
      I_ERROR_CODE => NULL                                  ,
      I_ERROR_MSG  => NULL
      );

    --Check allegro and reporting database pair
    VALIDATE_ENVIRONMENT_PAIRS(
      O_RET_CODE     => V_STEP_ERR_CODE ,
      O_RET_MESSAGE  => V_STEP_ERR_MSG);
    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Check allegro and reporting database pair',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );
    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;


    --Check whether filter is provided
    IF ( V_TARGET_NAME = 'VALUATION' AND I_FILTER_VALUATION IS NULL ) THEN
      V_STEP_ERR_CODE := C_NO_FILTER;
      V_STEP_ERR_MSG  := 'Need filter for VALUATION, please provide this information through I_FILTER_VALUATION';
    END IF;
    IF ( V_TARGET_NAME != 'VALUATION' AND I_FILTER_DATE IS NULL ) THEN
      V_STEP_ERR_CODE := C_NO_FILTER;
      V_STEP_ERR_MSG  := 'Need filter for '||V_TARGET_NAME ||', please provide this information through I_FILTER_DATE';
    END IF;
    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Check whether filter is provided',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );
    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE = C_NO_FILTER ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;





    -- Check whether action is applicable to target
    FOR X IN (SELECT OPERATION_ARCH,
                     OPERATION_RSTR,
                     OPERATION_PURG
                FROM ILM_OPERATION_MATRIX
               WHERE TARGET_NAME = V_TARGET_NAME
             )
    LOOP
      V_TARGET_EXISTS := 'Y';

      --get allowed action
      CASE V_ACTION
           WHEN 'ARCH' THEN V_ACTION_ALLOWED := X.OPERATION_ARCH;
           WHEN 'RSTR' THEN V_ACTION_ALLOWED := X.OPERATION_RSTR;
           WHEN 'PURG' THEN V_ACTION_ALLOWED := X.OPERATION_PURG;
      -- cannot recognize the action!
      ELSE
           V_STEP_ERR_CODE := C_OPER_NOT_RECOG;
      END CASE;
    END LOOP;

    -- recognize the action?
    IF ( V_STEP_ERR_CODE = C_OPER_NOT_RECOG ) THEN
      V_STEP_ERR_CODE := C_OPER_NOT_RECOG;
      V_STEP_ERR_MSG  := 'Cannot recognize action: '|| V_ACTION||', expecting ARCH/RSTR/PURG/CNCL';

    -- yes, action recognized
    ELSE
      -- target exists?
      IF ( V_TARGET_EXISTS = 'Y' ) THEN

        -- action applicable?
        IF ( V_ACTION_ALLOWED = 'Y' ) THEN
          V_STEP_ERR_CODE := C_SUCCESS;
          V_STEP_ERR_MSG  := 'Target/action check passed: '|| V_TARGET_NAME||'|'||V_ACTION;

        -- action NOT applicable!
        ELSE
          -- construct error code and error msg
          CASE V_ACTION
               WHEN 'ARCH' THEN V_STEP_ERR_CODE := C_ARCH_NOT_ALLOW;
               WHEN 'RSTR' THEN V_STEP_ERR_CODE := C_RSTR_NOT_ALLOW;
               WHEN 'PURG' THEN V_STEP_ERR_CODE := C_PURG_NOT_ALLOW;
          END CASE;
          V_STEP_ERR_MSG  := 'Cannot perform '|| V_ACTION ||' on '|| V_TARGET_NAME;

        END IF; -- action applicable?

      -- Target not exist!
      ELSE
        V_STEP_ERR_CODE := C_INVALID_TARGET;
        V_STEP_ERR_MSG  := 'invalid target:'||V_TARGET_NAME||', cannot find target information in ILM_OPERATION_MATRIX';
      END IF; -- target exists?
    END IF;   -- recognize the action?


    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Check wether action is applicable on target',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );

    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;

    --Validate filter
    IF ( V_TARGET_NAME = 'VALUATION' ) THEN
      SELECT COUNT(*) INTO V_VALID_VALUTION_NUMBER
        FROM ALLEGRO.VALUATION
       WHERE VALUATION=I_FILTER_VALUATION;

      -- Not a valid valuation number
      IF ( V_VALID_VALUTION_NUMBER = 0 ) THEN
        V_STEP_ERR_CODE := C_INVALID_VALUATION;
        V_STEP_ERR_MSG  := 'Cannot find valuation number '|| I_FILTER_VALUATION || ' in table allegro.valuation';
      END IF;
    END IF;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Check whether filter is valid ',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );

    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;




    --Check valuation is locked
    IF ( V_TARGET_NAME = 'VALUATION' ) THEN
      SELECT LOCKVALUATION INTO V_LOCKVALUATION
        FROM ALLEGRO.VALUATION
       WHERE VALUATION=I_FILTER_VALUATION;

      -- Not a valid valuation number
      IF ( V_LOCKVALUATION = 1 ) THEN
        V_STEP_ERR_CODE := 'VALUATION-LOCKED';
        V_STEP_ERR_MSG  := 'Valuation '|| I_FILTER_VALUATION || ' is locked, all ARCH|PURG|RSTR requests will be rejected, unlock the valuation and resubmit the request';
      ELSE
        V_STEP_ERR_CODE := C_SUCCESS;
        V_STEP_ERR_MSG  := 'Valuation '|| I_FILTER_VALUATION || ' is not locked';
      END IF;
    END IF;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Check whether valuation is locked ',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );

    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;


    --REFRESH THE STATUS FIRST:
    IF ( V_TARGET_NAME = 'VALUATION' ) THEN
      REFRESH_STATUS_SINGLE( I_TARGET_NAME   => V_TARGET_NAME,
                             I_TARGET_FILTER => I_FILTER_VALUATION,
                             O_RET_CODE      => V_STEP_ERR_CODE   ,
                             O_RET_MESSAGE   => V_STEP_ERR_MSG
                            );
    ELSE
      REFRESH_STATUS_SINGLE( I_TARGET_NAME   => V_TARGET_NAME,
                             I_TARGET_FILTER => TO_CHAR(I_FILTER_DATE,'YYYY-MM-DD'),
                             O_RET_CODE      => V_STEP_ERR_CODE   ,
                             O_RET_MESSAGE   => V_STEP_ERR_MSG
                            );
    END IF;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Refresh archive status'              ,
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );

    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;

    --GET ARCHIVE STATUS
    IF ( V_TARGET_NAME = 'VALUATION' ) THEN
      GET_ARCHIVE_STATUS(
                          I_TABLE_NAME        => 'VALUATIONDETAIL' ,
                          I_FILTER_VALUATION  => I_FILTER_VALUATION,
                          I_FILTER_DATE       => NULL              ,
                          O_IN_ALG            => V_VD_ALG          ,
                          O_IN_ARCH           => V_VD_ARCH         ,
                          O_RET_CODE          => V_STEP_ERR_CODE   ,
                          O_RET_MESSAGE       => V_STEP_ERR_MSG
                        );

      IF ( V_STEP_ERR_CODE = C_SUCCESS) THEN
        GET_ARCHIVE_STATUS(
                            I_TABLE_NAME        => 'VALUATIONSUMMARY' ,
                            I_FILTER_VALUATION  => I_FILTER_VALUATION,
                            I_FILTER_DATE       => NULL              ,
                            O_IN_ALG            => V_VS_ALG          ,
                            O_IN_ARCH           => V_VS_ARCH         ,
                            O_RET_CODE          => V_STEP_ERR_CODE   ,
                            O_RET_MESSAGE       => V_STEP_ERR_MSG
                          );
      END IF;
    ELSE
        GET_ARCHIVE_STATUS(
                            I_TABLE_NAME        => V_TARGET_NAME      ,
                            I_FILTER_VALUATION  => NULL               ,
                            I_FILTER_DATE       => I_FILTER_DATE      ,
                            O_IN_ALG            => V_ALG              ,
                            O_IN_ARCH           => V_ARCH             ,
                            O_RET_CODE          => V_STEP_ERR_CODE    ,
                            O_RET_MESSAGE       => V_STEP_ERR_MSG
                          );
    END IF;

    --log info
    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                              ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE                    ,
      IO_STEP_ID   => GV_REQ_STEP_ID                            ,
      I_STEP_NAME  => 'Get archive status from status table',
      I_ERROR_CODE => V_STEP_ERR_CODE                       ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );

    --check failure, terminated the process
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;

    CASE      V_ACTION
         WHEN 'ARCH' THEN VALIDATE_ARCH( I_TARGET_NAME   => V_TARGET_NAME   ,
                                         I_VD_ALG        => V_VD_ALG   ,
                                         I_VD_ARCH       => V_VD_ARCH  ,
                                         I_VS_ALG        => V_VS_ALG   ,
                                         I_VS_ARCH       => V_VS_ARCH  ,
                                         I_ALG           => V_ALG      ,
                                         I_ARCH          => V_ARCH     ,
                                         O_RET_CODE      => V_STEP_ERR_CODE ,
                                         O_RET_MESSAGE   => V_STEP_ERR_MSG);
         WHEN 'RSTR' THEN VALIDATE_RSTR( I_TARGET_NAME   => V_TARGET_NAME   ,
                                         I_VD_ALG        => V_VD_ALG   ,
                                         I_VD_ARCH       => V_VD_ARCH  ,
                                         I_VS_ALG        => V_VS_ALG   ,
                                         I_VS_ARCH       => V_VS_ARCH  ,
                                         I_ALG           => V_ALG      ,
                                         I_ARCH          => V_ARCH     ,
                                         O_RET_CODE      => V_STEP_ERR_CODE ,
                                         O_RET_MESSAGE   => V_STEP_ERR_MSG);
         WHEN 'PURG' THEN VALIDATE_PURG( I_TARGET_NAME   => V_TARGET_NAME   ,
                                         I_VD_ALG        => V_VD_ALG   ,
                                         I_VD_ARCH       => V_VD_ARCH  ,
                                         I_VS_ALG        => V_VS_ALG   ,
                                         I_VS_ARCH       => V_VS_ARCH  ,
                                         I_ALG           => V_ALG      ,
                                         I_ARCH          => V_ARCH     ,
                                         O_RET_CODE      => V_STEP_ERR_CODE ,
                                         O_RET_MESSAGE   => V_STEP_ERR_MSG);
    END CASE;

    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                   ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE         ,
      IO_STEP_ID   => GV_REQ_STEP_ID                 ,
      I_STEP_NAME  => 'Validate archive status is applicable for the action:'||V_ACTION,
      I_ERROR_CODE => V_STEP_ERR_CODE            ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );

    IF ( V_STEP_ERR_CODE = C_ARCH_STATUS_SUCCESS_WARN) THEN
      V_STEP_ERR_CODE := C_SUCCESS;
    END IF;

    -- IF VALIDATION IS NOT SUCCESSFUL THEN
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;


    --V_STEP_ERR_CODE := C_SUCCESS;
    V_STEP_ERR_MSG  := '';

    -- CHECK WHETHER THERE'S OTHER REQUESTS
    V_OTHER_REQ_ID := GET_OTHER_ACTIVE_REQUEST_ID( I_TARGET_NAME => V_TARGET_NAME      ,
                                                   I_VALUATION   => I_FILTER_VALUATION ,
                                                   I_DATE        => I_FILTER_DATE      ,
                                                   I_MY_REQ_ID   => V_REQ_ID
                                                 ) ;

    IF ( V_OTHER_REQ_ID IS NOT NULL ) THEN
      CASE V_OVERRIDE_OTHER_REQUEST
      WHEN 'Y' THEN BEGIN
                      CANCEL_REQUEST(
                                      I_CNCL_REQUEST_ID    => V_OTHER_REQ_ID ,
                                      I_CANCELLED_BY       => I_REQUEST_BY   ,
                                      O_RET_CODE           => V_STEP_ERR_CODE,
                                      O_RET_MESSAGE        => V_STEP_ERR_MSG
                                    );
                    END;
      ELSE BEGIN
             V_STEP_ERR_CODE := C_STATUS_CODE_FAIL_STAGE;
             V_STEP_ERR_MSG  := 'Find another request acting on the same entry, other req id:'||V_OTHER_REQ_ID||', you may have to cancel other request or submit this request with override flag';
           END;
      END CASE;
    END IF;

    LOG_STEP_INFO(
      I_REQUEST_ID => V_REQ_ID                   ,
      I_PHASE_NAME => C_PHASE_STAGE_CODE         ,
      IO_STEP_ID   => GV_REQ_STEP_ID                 ,
      I_STEP_NAME  => 'Cancel any other active request',
      I_ERROR_CODE => V_STEP_ERR_CODE            ,
      I_ERROR_MSG  => V_STEP_ERR_MSG
      );

    -- IF VALIDATION IS NOT SUCCESSFUL THEN
    IF ( V_STEP_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := C_STATUS_CODE_FAIL_STAGE;
      O_RET_MESSAGE := V_STEP_ERR_MSG;
      STAGE_PROCESS_FAILED(V_REQ_ID);
      RETURN;
    END IF;


    -- FINALLY WE REACH THIS STEP:
    STAGE_PROCESS_SUCCEEDED(I_REQ_ID => V_REQ_ID);
    O_RET_CODE    := C_SUCCESS;
    O_RET_MESSAGE := '';
  END PUT_REQUEST;





  --------------------------------------------

  PROCEDURE START_MAINTENANCE_WINDOW(
    I_WINDOW_ID                  IN  NUMBER  ,
    I_STARTED_BY                 IN  VARCHAR2,
    I_WINDOW_SIZE_MINUTES        IN  NUMBER  ,  -- BATCH PROCESSING WINDOW
    I_WINDOW_MODE                IN  VARCHAR2,   -- RSTR | NON-VD | MAINTENANCE V_WINDOW_MODE
    O_WINDOW_ACTUAL_START        OUT DATE    ,
    O_WINDOW_ACTUAL_END          OUT DATE    ,
    O_REQ_COUNTER_RECOVER_ALL    OUT NUMBER  ,
    O_REQ_COUNTER_RECOVER_FAIL   OUT NUMBER  ,
    O_REQ_COUNTER_RECOVER_SUCC   OUT NUMBER  ,
    O_REQ_COUNTER_START_NEW      OUT NUMBER  ,
    O_REQ_COUNTER_START_LEFTOVER OUT NUMBER  ,
    O_REQ_COUNTER_END_SUCC       OUT NUMBER  ,
    O_REQ_COUNTER_END_FAIL       OUT NUMBER  ,
    O_REQ_COUNTER_END_LEFT       OUT NUMBER  ,
    O_RET_CODE                   OUT VARCHAR2,
    O_RET_MESSAGE                OUT VARCHAR2
  )
  IS
    V_WINDOW_ID NUMBER;
    V_WINDOW_CAN_START VARCHAR2(10) := 'FALSE';
    V_WINDOW_END_TIME  DATE;
    V_WINDOW_ERR_CODE    VARCHAR2(100)  := C_SUCCESS;
    V_WINDOW_ERR_MSG     VARCHAR2(4000) := '';

    V_WINDOW_MODE        VARCHAR2(100);
    V_VALUATION_WORKERS  NUMBER;

    V_FILTER_COLUMN  VARCHAR2(50);


    V_WAITING_WINDOW_START_COUNTER NUMBER := 0;

    TYPE T_REQ_LIST IS TABLE OF ILM_REQUESTS.REQUEST_ID%TYPE INDEX BY PLS_INTEGER;
    V_REQ_ARCH_LIST T_REQ_LIST;
    V_REQ_ALG_LIST  T_REQ_LIST;
    V_COUNTER NUMBER := 0;

    V_INVOKE_JOB_SQL VARCHAR2(4000);
    V_SQL VARCHAR2(4000);
    V_LAG        NUMBER;

    V_ACTIVE_REQS NUMBER;
    V_REQUEST_RECOVERABLE CHAR := 'N';

    V_IN_ALG    VARCHAR2(10);
    V_IN_ARCH   VARCHAR2(10);

    VD_PARTITION_NOT_FOUND EXCEPTION;
    PRAGMA EXCEPTION_INIT(VD_PARTITION_NOT_FOUND, -2149);

    V_RECOVER_REQUEST_ID NUMBER;



    V_REQ_COUNTER_RECOVER_ALL    NUMBER := 0;
    V_REQ_COUNTER_RECOVER_FAILED NUMBER := 0;

    V_REQ_COUNTER_NEW            NUMBER := 0;
    V_REQ_COUNTER_LEFTOVER       NUMBER := 0;

    V_REQ_COUNTER_COMPLETED_SUCC NUMBER := 0;
    V_REQ_COUNTER_COMPLETED_FAIL NUMBER := 0;

    V_SESSION_COUNTER NUMBER := 0;


  BEGIN
    O_RET_CODE    := C_SUCCESS;
    O_RET_MESSAGE := '';

    GV_WINDOW_STEP_ID := 1;
    V_WINDOW_MODE := UPPER(I_WINDOW_MODE);
    V_WINDOW_ID   := I_WINDOW_ID;
    --V_WINDOW_ID := SEQ_WINDOW_ID.NEXTVAL;
    V_WINDOW_END_TIME := SYSDATE + (I_WINDOW_SIZE_MINUTES/60/24);

    UPDATE ILM_WINDOWS
       SET WINDOW_PLANNED_START = SYSDATE,
           WINDOW_PLANNED_END   = V_WINDOW_END_TIME,
           STARTED_BY           = I_STARTED_BY,
           WINDOW_MODE          = I_WINDOW_MODE
     WHERE WINDOW_ID            = V_WINDOW_ID;
    COMMIT;


    --INSERT INTO ILM_WINDOWS (WINDOW_ID  , WINDOW_PLANNED_START, WINDOW_PLANNED_END, STARTED_BY  )
    --                 VALUES (V_WINDOW_ID, SYSDATE             , V_WINDOW_END_TIME , I_STARTED_BY);
    COMMIT;
    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID                                    ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
      I_STEP_NAME  => 'Starting window now, window id:'||V_WINDOW_ID ,
      I_ERROR_CODE => C_SUCCESS                                      ,
      I_ERROR_MSG  => ''
      );



    --Check allegro and reporting database pair
    V_WINDOW_ERR_CODE := NULL;
    V_WINDOW_ERR_MSG  := NULL;
    VALIDATE_ENVIRONMENT_PAIRS(
      O_RET_CODE     => V_WINDOW_ERR_CODE ,
      O_RET_MESSAGE  => V_WINDOW_ERR_MSG);
    --log info
    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID                                    ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
      I_STEP_NAME  => 'Check allegro and reporting database pair'    ,
      I_ERROR_CODE => V_WINDOW_ERR_CODE                                 ,
      I_ERROR_MSG  => V_WINDOW_ERR_MSG
      );
    --check failure, terminated the window
    IF ( V_WINDOW_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := V_WINDOW_ERR_CODE;
      O_RET_MESSAGE := V_WINDOW_ERR_MSG ;
      RETURN;
    END IF;


    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID                                    ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
      I_STEP_NAME  => 'Cleanup dead/zombie requests' ,
      I_ERROR_CODE => C_SUCCESS                                      ,
      I_ERROR_MSG  => ''
      );



    -----------------------------------------------------------------
    ---- Section 1: Cleanup zombie REQ
    -----------------------------------------------------------------

    FOR X IN (SELECT REQUEST_ID,CURRENT_PHASE,PHASE_STATUS,DB_JOB_NAME,JOB_STATUS,JOB_SESSION_ID,JOB_SESSION_SERIAL
                FROM ILM_JOB_PROCESS_STATUS
               WHERE CURRENT_PHASE <> C_PHASE_FINISH_CODE
                 AND PHASE_STATUS IN (C_STATUS_CODE_START_STAGE ,
                                      C_STATUS_CODE_START_P_ARCH,
                                      C_STATUS_CODE_START_P_ALG ,
                                      C_STATUS_CODE_FAIL_STAGE  ,
                                      C_STATUS_CODE_FAIL_P_ARCH ,
                                      C_STATUS_CODE_FAIL_P_ALG  )
              )
    LOOP
      IF (X.JOB_STATUS= 'SCHEDULED') THEN
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                    ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Cleanup dead/zombie requests' ,
          I_ERROR_CODE => C_SUCCESS                                      ,
          I_ERROR_MSG  => 'request '||x.REQUEST_ID||' skipped as job is submitted into database scheduler system and status is scheduled'
          );
        CONTINUE;
      END IF;


      IF (X.PHASE_STATUS IN ( C_STATUS_CODE_FAIL_STAGE  ,
                              C_STATUS_CODE_FAIL_P_ARCH ,
                              C_STATUS_CODE_FAIL_P_ALG  )
          )
      THEN
        BEGIN
          UPDATE ILM_REQUESTS
             SET CURRENT_PHASE = C_PHASE_FINISH_CODE,
                 LAST_STEP_ID = (-1) * LAST_STEP_ID     -- modified by v1.1, negative step id means the request status is recovered, but follow-up cleanup might be required!
           WHERE REQUEST_ID=X.REQUEST_ID;
          COMMIT;
          LOG_WINDOW_INFO(
            I_WINDOW_ID  => V_WINDOW_ID                                    ,
            IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
            I_STEP_NAME  => 'Cleanup dead/zombie requests' ,
            I_ERROR_CODE => C_SUCCESS                                      ,
            I_ERROR_MSG  => 'request '||x.REQUEST_ID
            );
          CONTINUE;
        EXCEPTION
          WHEN OTHERS THEN
            LOG_WINDOW_INFO(
              I_WINDOW_ID  => V_WINDOW_ID                                    ,
              IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
              I_STEP_NAME  => 'Cleanup dead/zombie requests' ,
              I_ERROR_CODE => C_FAILURE                                      ,
              I_ERROR_MSG  => 'Failed to update status as finished fo dead/zombie request '||x.REQUEST_ID
              );
            CONTINUE;
        END;

      ELSE
        --CHECK WHETHER IT'S STILL ONGOING

        SELECT COUNT(*)
          INTO V_SESSION_COUNTER
          FROM V$SESSION
         WHERE SID=X.JOB_SESSION_ID
           AND SERIAL#=X.JOB_SESSION_SERIAL;
        IF ( V_SESSION_COUNTER = 1 ) THEN
          LOG_WINDOW_INFO(
            I_WINDOW_ID  => V_WINDOW_ID                                    ,
            IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
            I_STEP_NAME  => 'Cleanup dead/zombie requests' ,
            I_ERROR_CODE => C_SUCCESS                                      ,
            I_ERROR_MSG  => 'request '||x.REQUEST_ID||' skipped as active job session found: '||X.JOB_SESSION_ID||','||X.JOB_SESSION_SERIAL
            );
          CONTINUE;
        ELSE
          BEGIN
            UPDATE ILM_REQUESTS
               SET CURRENT_PHASE = C_PHASE_FINISH_CODE,
                   PHASE_STATUS  = DECODE(X.CURRENT_PHASE,  C_PHASE_STAGE_CODE ,C_STATUS_CODE_FAIL_STAGE,
                                                            C_PHASE_P_ARCH_CODE,C_STATUS_CODE_FAIL_P_ARCH,
                                                            C_PHASE_P_ALG_CODE ,C_STATUS_CODE_FAIL_P_ALG,
                                                            'UNKNOWN'),
                   LAST_STEP_ID = (-1) * LAST_STEP_ID    -- modified by v1.1, negative step id means the request status is recovered
             WHERE REQUEST_ID=X.REQUEST_ID;
            COMMIT;
            LOG_WINDOW_INFO(
              I_WINDOW_ID  => V_WINDOW_ID                                    ,
              IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
              I_STEP_NAME  => 'Cleanup dead/zombie requests' ,
              I_ERROR_CODE => C_SUCCESS                                      ,
              I_ERROR_MSG  => 'request '||x.REQUEST_ID
              );
            CONTINUE;
          EXCEPTION
            WHEN OTHERS THEN
              LOG_WINDOW_INFO(
                I_WINDOW_ID  => V_WINDOW_ID                                    ,
                IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
                I_STEP_NAME  => 'Cleanup dead/zombie requests' ,
                I_ERROR_CODE => C_FAILURE                                      ,
                I_ERROR_MSG  => 'Failed to update status as finished fo dead/zombie request '||x.REQUEST_ID
                );
          END;
        END IF;
      END IF;
    END LOOP;


    -----------------------------------------------------------------
    ---- Section 2: Wait ongoing valuation job -- this part is not required if partition is dropped with option: update global index
    -----------------------------------------------------------------
    -- WHILE ( V_WINDOW_CAN_START != 'TRUE' )
    -- LOOP
    --   EXIT WHEN V_WINDOW_MODE != 'MAINTENANCE';  -- V1.1 IF NOT MAINTENANCE WINDOW, THEN NO NEED TO WAIT FOR ONGOING VALUATION JOB
    --
    --   V_WINDOW_ERR_CODE := NULL;
    --   V_WINDOW_ERR_MSG  := NULL;
    --
    --
    --   --Check whether we still have time for the window
    --   IF ( SYSDATE > V_WINDOW_END_TIME ) THEN
    --     V_WINDOW_ERR_CODE:= C_WINDOW_TIMEOUT;
    --     V_WINDOW_ERR_MSG := 'This window ran out of time, closing window now';
    --   ELSE
    --     V_WINDOW_ERR_CODE:= C_PENDING;
    --     V_WINDOW_ERR_MSG := 'Waiting ongoing valuation to finish';
    --   END IF;
    --
    --   LOG_WINDOW_INFO(
    --     I_WINDOW_ID  => V_WINDOW_ID                             ,
    --     IO_STEP_ID   => GV_WINDOW_STEP_ID                       ,
    --     I_STEP_NAME  => 'Checking whether window can be started',
    --     I_ERROR_CODE => V_WINDOW_ERR_CODE                           ,
    --     I_ERROR_MSG  => V_WINDOW_ERR_MSG
    --     );
    --   -- incremental steps
    --   --GV_WINDOW_STEP_ID := GV_WINDOW_STEP_ID - 1;
    --
    --   IF ( O_RET_CODE = C_WINDOW_TIMEOUT ) THEN
    --     O_RET_CODE    := V_WINDOW_ERR_CODE;
    --     O_RET_MESSAGE := V_WINDOW_ERR_MSG ;
    --     RETURN;
    --   END IF;
    --
    --   --Greenlight FROM ASHIF
    --   V_WINDOW_ERR_CODE := NULL;
    --   V_WINDOW_ERR_MSG  := NULL;
    --   SELECT COUNT(*) INTO V_VALUATION_WORKERS
    --     FROM ALLEGRO.GRIDQUEUE
    --    WHERE UPPER(WORKERTYPE)='VALUATION'
    --      AND UPPER(EVENTCAUSE) LIKE 'CREATE%VALUATION%';
    --
    --   CASE V_VALUATION_WORKERS
    --        WHEN 0 THEN V_WINDOW_CAN_START := 'TRUE';
    --        ELSE        V_WINDOW_CAN_START := 'FALSE';
    --   END CASE;
    --
    --   IF ( V_WINDOW_CAN_START != 'TRUE' ) THEN
    --     V_WINDOW_ERR_CODE:= C_PENDING;
    --     V_WINDOW_ERR_MSG := 'Waiting ongoing valuation to finish';
    --     LOG_WINDOW_INFO(
    --       I_WINDOW_ID  => V_WINDOW_ID                             ,
    --       IO_STEP_ID   => GV_WINDOW_STEP_ID                       ,
    --       I_STEP_NAME  => 'Active valuation worker found in GRIDQUEUE, sleeping 5 seconds',
    --       I_ERROR_CODE => V_WINDOW_ERR_CODE                           ,
    --       I_ERROR_MSG  => V_WINDOW_ERR_MSG
    --       );
    --     -- incremental steps
    --   --GV_WINDOW_STEP_ID := GV_WINDOW_STEP_ID - 1;
    --     DBMS_LOCK.SLEEP(5);
    --   END IF;
    -- END LOOP;

    --IF WE JUMP OUT OF THE LAST LOOP, THEN WE ARE STARTING WINDOW NOW!
    -- LOG THE ACTUAL START TIME
    O_WINDOW_ACTUAL_START := SYSDATE;
    UPDATE ILM_WINDOWS
       SET WINDOW_ACTUAL_START = O_WINDOW_ACTUAL_START
     WHERE WINDOW_ID = V_WINDOW_ID;
    COMMIT;

    -- Check lag between primary and reporting side, will quit if the lag is over 2 minutes
    -- V_LAG
    BEGIN
      SELECT NVL(ROUND((ALG.ALG_TIME - ARCH.ARCH_TIME)*60*60*24),99999) INTO V_LAG
        FROM (SELECT SYSDATE ALG_TIME FROM DUAL) ALG,
             (SELECT MINING_TIME ARCH_TIME FROM V$LOGSTDBY_PROGRESS@DBL_REPORTING) ARCH;
      IF ( V_LAG > 120) THEN
        V_WINDOW_ERR_CODE := C_FAILURE;
        V_WINDOW_ERR_MSG  := 'lag is '|| V_LAG ||' seconds, too big for maintenance window, terminating the window';
      ELSE
        V_WINDOW_ERR_CODE := C_SUCCESS;
        V_WINDOW_ERR_MSG  := 'lag is '|| V_LAG ||' seconds, good to proceed for the window';
      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        V_WINDOW_ERR_CODE := C_FAILURE;
        V_WINDOW_ERR_MSG  := 'Failed to get lag, error msg:'|| SUBSTR(SQLERRM,1,100);
    END;


    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID                                ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
      I_STEP_NAME  => 'Checking lag between primary and reporting database, will terminate window if lag>120 seconds',
      I_ERROR_CODE => V_WINDOW_ERR_CODE,
      I_ERROR_MSG  => V_WINDOW_ERR_MSG
      );

    IF ( V_WINDOW_ERR_CODE != C_SUCCESS ) THEN
      O_RET_CODE    := V_WINDOW_ERR_CODE;
      O_RET_MESSAGE := V_WINDOW_ERR_MSG ;
      RETURN;
    END IF;


    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID                                ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
      I_STEP_NAME  => 'Start recovering if data exist in both allegro and archive',
      I_ERROR_CODE => C_SUCCESS,
      I_ERROR_MSG  => ''
      );

    -----------------------------------------------------------------
    ---- Section 3: Recover the wrong data status from failed request
    -----------------------------------------------------------------

    -- CHECK WHETHER WE NEED RECOVERY
    FOR X IN (SELECT A.TABLE_NAME        ,
                     A.TARGET_DATE       ,
                     A.VALUATION         ,
                     A.LAST_OPERATION_ID ,
                     R.TARGET_NAME       ,
                     R.ACTION            ,
                     R.CURRENT_PHASE     ,
                     R.PHASE_STATUS      ,
                     R.REQUEST_BY        ,
                     R.LAST_STEP_ID
                FROM ILM_ARCHIVE_STATUS A
                LEFT OUTER JOIN ILM_REQUESTS R
                  ON A.LAST_OPERATION_ID = R.REQUEST_ID
               WHERE A.IN_ALG  = 'Y'
                 AND A.IN_ARCH = 'Y'
             )
    LOOP
      V_REQUEST_RECOVERABLE := 'N';

      -- SKIP THE ONES THAT MAY BE PICKED UP BY THIS WINDOW
      IF ( X.CURRENT_PHASE = C_PHASE_P_ARCH_CODE AND X.PHASE_STATUS = C_STATUS_CODE_SUCCESS_P_ARCH ) THEN
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Entry will be processed by this window with request:'|| X.LAST_OPERATION_ID,
          I_ERROR_CODE => C_SUCCESS,
          I_ERROR_MSG  => ''
          );
        CONTINUE;
      END IF;

      V_REQ_COUNTER_RECOVER_ALL := V_REQ_COUNTER_RECOVER_ALL + 1;
      LOG_WINDOW_INFO(
        I_WINDOW_ID  => V_WINDOW_ID                                ,
        IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
        I_STEP_NAME  => 'Recovering '||X.LAST_OPERATION_ID||': '||X.TABLE_NAME||'('|| X.VALUATION || TO_CHAR(X.TARGET_DATE,'YYYY-MM-DD') ||')'   ,
          I_ERROR_CODE => C_SUCCESS,
          I_ERROR_MSG  => ''
        );
      --REFRESH STATUS
      IF ( X.TABLE_NAME = 'VALUATIONSUMMARY' OR X.TABLE_NAME = 'VALUATIONDETAIL'  ) THEN
        REFRESH_STATUS_SINGLE( I_TARGET_NAME   => 'VALUATION'       ,
                               I_TARGET_FILTER => X.VALUATION       ,
                               I_MY_REQUEST_ID => X.LAST_OPERATION_ID      ,
                               O_RET_CODE      =>  V_WINDOW_ERR_CODE  ,
                               O_RET_MESSAGE   =>  V_WINDOW_ERR_MSG
                              );
      ELSE
        REFRESH_STATUS_SINGLE( I_TARGET_NAME   => X.TABLE_NAME,
                               I_TARGET_FILTER => TO_CHAR(X.TARGET_DATE,'YYYY-MM-DD'),
                               I_MY_REQUEST_ID => X.LAST_OPERATION_ID      ,
                               O_RET_CODE      => V_WINDOW_ERR_CODE    ,
                               O_RET_MESSAGE   => V_WINDOW_ERR_MSG
                              );
      END IF;

      IF ( V_WINDOW_ERR_CODE = C_SUCCESS) THEN
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Successfully refreshed data status',
          I_ERROR_CODE => V_WINDOW_ERR_CODE,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );
      ELSE
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Skip recovery as failed to refresh data status, error msg:'||V_WINDOW_ERR_MSG,
          I_ERROR_CODE => V_WINDOW_ERR_CODE,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );
        V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
        CONTINUE;
      END IF;

      SELECT   IN_ALG,   IN_ARCH
        INTO V_IN_ALG, V_IN_ARCH
        FROM ILM_ARCHIVE_STATUS
       WHERE TABLE_NAME = X.TABLE_NAME
         AND NVL(TARGET_DATE,TO_DATE('1900-01-01','YYYY-MM-DD')) = NVL(X.TARGET_DATE,TO_DATE('1900-01-01','YYYY-MM-DD'))
         AND NVL(VALUATION,'-1') = NVL(X.VALUATION,'-1');
      IF ( V_IN_ALG = 'N' OR V_IN_ARCH = 'N') THEN
      -- STATUS RECOVERED
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Status recovered to IN_ALG:'||V_IN_ALG||' IN_ARCH:'||V_IN_ARCH,
          I_ERROR_CODE => V_WINDOW_ERR_CODE,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );
        CONTINUE;
      ELSE
        -- STATUS NOT RECOVERED
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Status NOT recovered, starting recovery',
          I_ERROR_CODE => V_WINDOW_ERR_CODE,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );
      END IF;

      -- Check last action

      IF ( X.LAST_OPERATION_ID IS NULL OR
           X.ACTION IS NULL OR
           --(X.CURRENT_PHASE = C_PHASE_FINISH_CODE AND X.LAST_STEP_ID > 0) OR --Modified by V1.1, do nothing if last req is normally completed;
           --                                                                 --if req status is recovered to finished by zombie processing,
           --                                                                 --we have to skip recovery for this item
           (  X.CURRENT_PHASE = C_PHASE_FINISH_CODE AND
             (X.PHASE_STATUS NOT IN ( C_STATUS_CODE_FAIL_P_ARCH, C_STATUS_CODE_FAIL_P_ALG)  )
           )
         ) THEN
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Skip recovery, cannot fetch last req info on this item, or last req is not a failed one. reqID:'|| X.LAST_OPERATION_ID||', phase:'|| X.CURRENT_PHASE||', PHASE STATUS:'||X.PHASE_STATUS,
          I_ERROR_CODE => C_FAILURE,
          I_ERROR_MSG  => ''
          );
        V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
        CONTINUE;
      END IF;

      -- -- RSTR | NON-VD | MAINTENANCE V_WINDOW_MODE   -- update global index
      -- IF (     X.TABLE_NAME IN ('VALUATIONDETAIL','VALUATIONSUMMARY')
      --      AND V_WINDOW_MODE != 'MAINTENANCE'
      --      AND X.ACTION = 'RSTR'
      --    ) THEN
      --   LOG_WINDOW_INFO(
      --     I_WINDOW_ID  => V_WINDOW_ID                                ,
      --     IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
      --     I_STEP_NAME  => 'Skip VD:RSTR recovery for non-maintenance windows, REQID:'||X.LAST_OPERATION_ID,
      --     I_ERROR_CODE => C_FAILURE,
      --     I_ERROR_MSG  => ''
      --     );
      --   V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
      --   CONTINUE;
      -- END IF;


      SELECT FILTER_COLUMN
        INTO V_FILTER_COLUMN
        FROM ILM_OPERATION_MATRIX
       WHERE TARGET_NAME = DECODE(X.TABLE_NAME,'VALUATIONDETAIL','VALUATION','VALUATIONSUMMARY','VALUATION',X.TABLE_NAME);
      -- recovery from last action
      IF    ( X.ACTION = 'ARCH' ) THEN
        -- Purge from arch store
        BEGIN
          ALLEGRO_ILM_ARCHIVE.DO_PURG@DBL_REPORTING(
            I_FILTER_COLUMN     => V_FILTER_COLUMN   ,
            I_TARGET_NAME       => X.TARGET_NAME     ,
            I_FILTER_VALUATION  => X.VALUATION,
            I_FILTER_DATE       => X.TARGET_DATE     ,
            I_REQUEST_ID        => X.LAST_OPERATION_ID*(-1)  );
          SELECT RET_CODE, RET_MESSAGE
            INTO V_WINDOW_ERR_CODE, V_WINDOW_ERR_MSG
            FROM ILM_ARCHIVE_REQ_STATUS@DBL_REPORTING
           WHERE REQUEST_ID = X.LAST_OPERATION_ID*(-1);
        EXCEPTION
          WHEN OTHERS THEN
            V_WINDOW_ERR_CODE    := C_FAILURE;
            V_WINDOW_ERR_MSG     := 'Failed to purge archive, error message:'||  SUBSTR(SQLERRM,1,100);
            CONTINUE;
        END;

        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Purge from archive' ,
          I_ERROR_CODE => V_WINDOW_ERR_CODE,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );

        IF ( V_WINDOW_ERR_CODE  != C_SUCCESS ) THEN
          V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
          CONTINUE;
        END IF;

      ELSIF ( X.ACTION = 'RSTR' ) THEN
        -- delete from live
        BEGIN
          IF ( X.TARGET_NAME = 'VALUATION' ) THEN
            DELETE FROM ALLEGRO.VALUATIONSUMMARY WHERE VALUATION = X.VALUATION;
            COMMIT;
            EXECUTE IMMEDIATE 'ALTER TABLE ALLEGRO.VALUATIONDETAIL DROP PARTITION P_'||X.VALUATION||' UPDATE GLOBAL INDEXES';
          ELSE
            V_SQL := 'DELETE FROM ALLEGRO.'||X.TABLE_NAME ||
                     ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||TO_CHAR(X.TARGET_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')'||
                     '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||TO_CHAR(X.TARGET_DATE,'YYYY-MM-DD') ||''',''YYYY-MM-DD'')+1';
            EXECUTE IMMEDIATE V_SQL;
          END IF;
          COMMIT;
          V_WINDOW_ERR_CODE    := C_SUCCESS;
          V_WINDOW_ERR_MSG:= 'cleanup the live store';
        EXCEPTION
          WHEN VD_PARTITION_NOT_FOUND THEN
            V_WINDOW_ERR_CODE    := C_SUCCESS;
            V_WINDOW_ERR_MSG := 'No need to drop vd partition as it does not exist: P_'|| X.VALUATION;
          WHEN OTHERS THEN
            V_WINDOW_ERR_CODE   := C_FAILURE;
            V_WINDOW_ERR_MSG  := 'Failed to cleanup the live store, error message:'||  SUBSTR(SQLERRM,1,100);
        END;

        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'cleanup the live store' ,
          I_ERROR_CODE => V_WINDOW_ERR_CODE,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );

        IF ( V_WINDOW_ERR_CODE != C_SUCCESS) THEN
          V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
          CONTINUE;
        END IF;

      ELSE
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
          I_STEP_NAME  => 'Last action has to be ARCH or RSTR, cannot recover for action:'||X.ACTION ,
          I_ERROR_CODE => C_FAILURE,
          I_ERROR_MSG  => ''
          );
        V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
        CONTINUE;
      END IF;

      V_WINDOW_ERR_CODE := C_SUCCESS;
      V_WINDOW_ERR_MSG  :='';
      --Update the old request as finished, leave status code as is
      BEGIN
        UPDATE ILM_REQUESTS
           SET CURRENT_PHASE = C_PHASE_FINISH_CODE
         WHERE REQUEST_ID =  X.LAST_OPERATION_ID;
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          V_WINDOW_ERR_CODE   := C_FAILURE;
          V_WINDOW_ERR_MSG  := 'Failed to mark old req as finished, reqid:'||X.LAST_OPERATION_ID ||', error message:'||  SUBSTR(SQLERRM,1,100);
      END;
      LOG_WINDOW_INFO(
        I_WINDOW_ID  => V_WINDOW_ID                                ,
        IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
        I_STEP_NAME  => 'mark old req as finished' ,
        I_ERROR_CODE => V_WINDOW_ERR_CODE,
        I_ERROR_MSG  => V_WINDOW_ERR_MSG
        );
      IF ( V_WINDOW_ERR_CODE != C_SUCCESS ) THEN
        V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
        CONTINUE;
      END IF;


      -- RESUBMIT THE REQUEST
      PUT_REQUEST(
          I_TARGET_NAME            => X.TARGET_NAME,
          I_ACTION                 => X.ACTION     ,
          I_FILTER_VALUATION       => X.VALUATION  ,
          I_FILTER_DATE            => X.TARGET_DATE,
          I_REQUEST_BY             => 'WINDOW RECOVERY:'|| V_WINDOW_ID,
          I_OVERRIDE_OTHER_REQUEST => 'N'          ,
          O_REQUEST_ID             => V_RECOVER_REQUEST_ID ,
          O_RET_CODE               => V_WINDOW_ERR_CODE,
          O_RET_MESSAGE            => V_WINDOW_ERR_MSG
        );
      LOG_WINDOW_INFO(
        I_WINDOW_ID  => V_WINDOW_ID                                ,
        IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
        I_STEP_NAME  => 'Resubmit request, old id:'||X.LAST_OPERATION_ID||', new ID:'|| V_RECOVER_REQUEST_ID ,
        I_ERROR_CODE => V_WINDOW_ERR_CODE,
        I_ERROR_MSG  => V_WINDOW_ERR_MSG
        );
      IF ( V_WINDOW_ERR_CODE != C_SUCCESS ) THEN
        V_REQ_COUNTER_RECOVER_FAILED := V_REQ_COUNTER_RECOVER_FAILED + 1;
      END IF;
    END LOOP;

    -- AND CHECK HOW MUCH WORK TO DO THIS TIME
    SELECT COUNT(*) INTO V_REQ_COUNTER_NEW
      FROM ILM_REQUESTS
     WHERE CURRENT_PHASE = C_PHASE_STAGE_CODE
       AND PHASE_STATUS  = C_STATUS_CODE_SUCCESS_STAGE
       AND 'Y'=(CASE V_WINDOW_MODE                                     -- GENERATE LIST OF WORK BASED ON THE WINDOW MODE V1.1
                WHEN 'MAINTENANCE' THEN 'Y'                            -- MAINTENANCE MODE: PROCESS ALL REQUESTS
                WHEN 'NON-VD'      THEN 'Y'                            -- NON-VD MODE: PROCESS ALL REQUESTS
                -- WHEN 'NON-VD'      THEN (CASE TARGET_NAME||'|'||ACTION -- NON-VD MODE: ALL REQUESTS EXCEPT VD:ARCH REQUEST
                --                          WHEN 'VALUATION|ARCH' THEN 'N'
                --                          ELSE 'Y'
                --                          END)
                WHEN 'RSTR'        THEN (CASE ACTION                   --RSTR MODE: ONLY RESTORE REQUESTS ARE PROCESSED
                                         WHEN 'RSTR' THEN 'Y'
                                         ELSE 'N'
                                         END)
                ELSE 'N'
                END);

    SELECT COUNT(*)
      INTO V_REQ_COUNTER_LEFTOVER
      FROM ILM_REQUESTS
     WHERE CURRENT_PHASE='P_ARCH'
       AND PHASE_STATUS='P_ARCH_0';

    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID                                ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID                              ,
      I_STEP_NAME  => 'Window started, initial request status count, New:'||V_REQ_COUNTER_NEW||', Leftovers:'|| V_REQ_COUNTER_LEFTOVER,
      I_ERROR_CODE => C_SUCCESS                              ,
      I_ERROR_MSG  => O_RET_MESSAGE
      );

    -----------------------------------------------------------------
    ---- Section 4: Request processing
    -----------------------------------------------------------------


    -- RSTR | NON-VD | MAINTENANCE V_WINDOW_MODE



    -- SUBMIT JOB FOR EACH REQUEST
    V_COUNTER := 0;
    FOR X IN (SELECT REQUEST_ID, DB_JOB_NAME ,
                     (CASE V_WINDOW_MODE||'|'||TARGET_NAME||'|'||ACTION
                      WHEN 'MAINTENANCE|VALUATION|ARCH' THEN 0
                      ELSE                                   1
                      END
                     ) V_ARCH_FIRST
                FROM ILM_REQUESTS
               WHERE CURRENT_PHASE = C_PHASE_STAGE_CODE
                 AND PHASE_STATUS  = C_STATUS_CODE_SUCCESS_STAGE
                 AND 'Y'=(CASE V_WINDOW_MODE                                     -- GENERATE LIST OF WORK BASED ON THE WINDOW MODE V1.1
                          WHEN 'MAINTENANCE' THEN 'Y'                            -- MAINTENANCE MODE: PROCESS ALL REQUESTS
                          WHEN 'NON-VD'      THEN 'Y'                            -- NON-VD MODE: PROCESS ALL REQUESTS
                          -- WHEN 'NON-VD'      THEN (CASE TARGET_NAME||'|'||ACTION -- NON-VD MODE: ALL REQUESTS EXCEPT VD:ARCH REQUEST
                          --                          WHEN 'VALUATION|ARCH' THEN 'N'
                          --                          ELSE 'Y'
                          --                          END)
                          WHEN 'RSTR'        THEN (CASE ACTION                   --RSTR MODE: ONLY RESTORE REQUESTS ARE PROCESSED
                                                   WHEN 'RSTR' THEN 'Y'
                                                   ELSE 'N'
                                                   END)
                          ELSE 'N'
                          END)
              ORDER BY V_ARCH_FIRST ASC, ACTION DESC, REQUEST_ID ASC
             )
    LOOP
      V_REQ_ARCH_LIST(V_COUNTER) := X.REQUEST_ID;
      V_COUNTER := V_COUNTER + 1;

      LOG_WINDOW_INFO(
        I_WINDOW_ID  => V_WINDOW_ID                                ,
        IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
        I_STEP_NAME  => 'Submitting job for request '||X.REQUEST_ID ,
        I_ERROR_CODE => C_SUCCESS                                  ,
        I_ERROR_MSG  => O_RET_MESSAGE
        );
      -- incremental steps
      --GV_WINDOW_STEP_ID := GV_WINDOW_STEP_ID - 1;

      V_INVOKE_JOB_SQL := 'BEGIN ALLEGRO_ILM.PROCESS_IN_ARCHIVE('|| X.REQUEST_ID ||','|| V_WINDOW_ID ||'); END;';

      FOR Y IN (SELECT 1 FROM USER_SCHEDULER_JOBS WHERE JOB_NAME=X.DB_JOB_NAME)
      LOOP
        BEGIN
          DBMS_SCHEDULER.DROP_JOB (JOB_NAME => X.DB_JOB_NAME);
        EXCEPTION
          WHEN OTHERS THEN
            NULL;
        END;
      END LOOP;


      BEGIN
        DBMS_SCHEDULER.CREATE_JOB (
          JOB_NAME        => X.DB_JOB_NAME,
          JOB_TYPE        => 'PLSQL_BLOCK',
          JOB_ACTION      => V_INVOKE_JOB_SQL,
          START_DATE      => SYSTIMESTAMP,
          auto_drop       => FALSE,
          ENABLED         => TRUE);
      EXCEPTION
        WHEN OTHERS THEN
          O_RET_CODE       := C_FAILURE;
          O_RET_MESSAGE := 'Failed to submit job to process in archive, error message:'|| SUBSTR(SQLERRM, 1, 100);
          LOG_WINDOW_INFO(
            I_WINDOW_ID  => V_WINDOW_ID                                ,
            IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
            I_STEP_NAME  => 'Submitting job for request '||X.REQUEST_ID ,
            I_ERROR_CODE => O_RET_CODE                                  ,
            I_ERROR_MSG  => O_RET_MESSAGE
            );
          V_REQ_COUNTER_COMPLETED_FAIL := V_REQ_COUNTER_COMPLETED_FAIL + 1;
          RETURN;
      END;
    END LOOP;


    --Keep scanning the request table to find which request are eligible to process in the live store
    WHILE ( SYSDATE <= ( V_WINDOW_END_TIME - (20/60/24)))
    LOOP
      FOR X IN ( SELECT REQUEST_ID, TARGET_NAME, ACTION, FILTER_VALUATION, FILTER_DATE
                   FROM ILM_REQUESTS
                  WHERE CURRENT_PHASE = C_PHASE_P_ARCH_CODE
                    AND PHASE_STATUS  = C_STATUS_CODE_SUCCESS_P_ARCH )
      LOOP
        P_ALG_STARTING(X.REQUEST_ID, V_WINDOW_ID );
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
          I_STEP_NAME  => 'REQ:'|| X.REQUEST_ID || ' starting on ALG side ',
          I_ERROR_CODE => V_WINDOW_ERR_CODE                                  ,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );
        -- incremental steps
      --GV_WINDOW_STEP_ID := GV_WINDOW_STEP_ID - 1;

        --Only valuation need partition maintenance
        IF ( X.TARGET_NAME = 'VALUATION'  AND X.ACTION = 'ARCH') THEN
          BEGIN
            EXECUTE IMMEDIATE 'ALTER TABLE ALLEGRO.VALUATIONDETAIL DROP PARTITION P_'||X.FILTER_VALUATION||' UPDATE GLOBAL INDEXES';
          EXCEPTION
            WHEN VD_PARTITION_NOT_FOUND THEN
              V_WINDOW_ERR_CODE    := C_SUCCESS;
              V_WINDOW_ERR_MSG := 'No need to drop vd partition as it does not exist: P_'|| X.FILTER_VALUATION;
            WHEN OTHERS THEN
              V_WINDOW_ERR_CODE    := C_FAILURE;
              V_WINDOW_ERR_MSG := 'Failed to drop vd partition: P_'|| X.FILTER_VALUATION ||',  error message:'|| SUBSTR(SQLERRM, 1, 100);
          END;
          LOG_WINDOW_INFO(
            I_WINDOW_ID  => V_WINDOW_ID                                ,
            IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
            I_STEP_NAME  => 'Drop partition for vd:P_'|| X.FILTER_VALUATION,
            I_ERROR_CODE => V_WINDOW_ERR_CODE                                  ,
            I_ERROR_MSG  => V_WINDOW_ERR_MSG
            );
          IF ( V_WINDOW_ERR_CODE != C_SUCCESS) THEN
            -- mark this request as failed to process.
            P_ALG_FAILED(X.REQUEST_ID);
            V_REQ_COUNTER_COMPLETED_FAIL := V_REQ_COUNTER_COMPLETED_FAIL + 1;
            CONTINUE;
          END IF;
        END IF;


        -- mark request as successfully finished
        P_ALG_SUCCEEDED(X.REQUEST_ID);
        V_REQ_COUNTER_COMPLETED_SUCC := V_REQ_COUNTER_COMPLETED_SUCC + 1;
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
          I_STEP_NAME  => 'request '|| X.REQUEST_ID ||' successfully finished at ALG side',
          I_ERROR_CODE => C_SUCCESS                                  ,
          I_ERROR_MSG  => ''
          );

        -- refresh status
        IF ( X.TARGET_NAME = 'VALUATION' ) THEN
          REFRESH_STATUS_SINGLE( I_TARGET_NAME   => X.TARGET_NAME     ,
                                 I_TARGET_FILTER => X.FILTER_VALUATION,
                                 I_MY_REQUEST_ID => X.REQUEST_ID      ,
                                 O_RET_CODE      => V_WINDOW_ERR_CODE   ,
                                 O_RET_MESSAGE   => V_WINDOW_ERR_MSG
                                );
        ELSE
          REFRESH_STATUS_SINGLE( I_TARGET_NAME   => X.TARGET_NAME,
                                 I_TARGET_FILTER => TO_CHAR(X.FILTER_DATE,'YYYY-MM-DD'),
                                 I_MY_REQUEST_ID => X.REQUEST_ID      ,
                                 O_RET_CODE      => V_WINDOW_ERR_CODE  ,
                                 O_RET_MESSAGE   => V_WINDOW_ERR_MSG
                                );
        END IF;

        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID       ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID ,
          I_STEP_NAME  => 'Refresh status'  ,
          I_ERROR_CODE => V_WINDOW_ERR_CODE ,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );

      END LOOP;

      --Sleep 5 seconds each time
      DBMS_LOCK.SLEEP(5);

      --Check how many requests are still being process in ARCH phase
      SELECT COUNT(*) INTO V_ACTIVE_REQS
        FROM ILM_REQUESTS
       WHERE CURRENT_PHASE = C_PHASE_P_ARCH_CODE
         AND PHASE_STATUS IN ( C_STATUS_CODE_START_P_ARCH, C_STATUS_CODE_SUCCESS_P_ARCH);

      -- IF ALL REQUESTS COMPLETED, THEN EXIT
      IF ( V_ACTIVE_REQS = 0 ) THEN
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
          I_STEP_NAME  => 'ALL REQUESTS HAS BEEN PROCESSED',
          I_ERROR_CODE => C_SUCCESS                                  ,
          I_ERROR_MSG  => ''
          );
        EXIT;
      END IF;


    END LOOP;

    -----------------------------------------------------------------
    ---- Section 5: Finalize
    -----------------------------------------------------------------
    --REBUILD vd INDEX IF UNUSABLE
    BEGIN
      V_WINDOW_ERR_MSG := NULL;
      FOR X IN (SELECT INDEX_NAME
                  FROM DBA_INDEXES
                 WHERE (STATUS = 'UNUSABLE' AND OWNER='ALLEGRO' )
                       --AND
                       --(OWNER,INDEX_NAME) IN ( SELECT INDEX_OWNER, INDEX_NAME
                       --                          FROM DBA_CONSTRAINTS
                       --                         WHERE OWNER='ALLEGRO'
                       --                           AND CONSTRAINT_TYPE='P'
                       --                           AND TABLE_NAME = 'VALUATIONDETAIL'
                       --                      )
               )
      LOOP
          EXECUTE IMMEDIATE 'ALTER INDEX ALLEGRO.'||X.INDEX_NAME||' REBUILD PARALLEL 64';
          EXECUTE IMMEDIATE 'ALTER INDEX ALLEGRO.'||X.INDEX_NAME||' NOPARALLEL';
          V_WINDOW_ERR_MSG := V_WINDOW_ERR_MSG||X.INDEX_NAME||', ';
      END LOOP;
      IF ( V_WINDOW_ERR_MSG IS NULL ) THEN
        V_WINDOW_ERR_MSG  := 'No index is unusable';
      ELSE
        V_WINDOW_ERR_MSG := ' indexes '||V_WINDOW_ERR_MSG||' were rebuilt as they are unusable';
      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        V_WINDOW_ERR_CODE := C_FAILURE;
        V_WINDOW_ERR_MSG  := 'FAILED to rebuild UNUSABLE primary key index for VD table! Critical error! Error message:'|| SUBSTR(SQLERRM, 1, 100);
    END;
    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID                                ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
      I_STEP_NAME  => 'rebuild unusable index',
      I_ERROR_CODE => V_WINDOW_ERR_CODE                                 ,
      I_ERROR_MSG  => V_WINDOW_ERR_MSG
      );


    --GATHER STATISTICS
    BEGIN
      EXECUTE IMMEDIATE 'ALTER INDEX ALLEGRO.PK_VALUATIONDETAIL COALESCE CLEANUP';
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    IF ( V_WINDOW_MODE = 'MAINTENANCE' ) THEN

      BEGIN
        FOR X IN (SELECT INDEX_NAME
                    FROM DBA_INDEXES
                   WHERE (ORPHANED_ENTRIES='YES') AND
                         (OWNER,INDEX_NAME) IN ( SELECT INDEX_OWNER, INDEX_NAME
                                                   FROM DBA_CONSTRAINTS
                                                  WHERE OWNER='ALLEGRO'
                                                    AND CONSTRAINT_TYPE='P'
                                                    AND TABLE_NAME = 'VALUATIONDETAIL'
                                               )
                 )
        LOOP
          EXECUTE IMMEDIATE 'ALTER INDEX ALLEGRO.'||X.INDEX_NAME||' REBUILD ONLINE PARALLEL 64';
          EXECUTE IMMEDIATE 'ALTER INDEX ALLEGRO.'||X.INDEX_NAME||' NOPARALLEL';
        END LOOP;
      EXCEPTION
        WHEN OTHERS THEN
          V_WINDOW_ERR_CODE := C_FAILURE;
          V_WINDOW_ERR_MSG  := 'FAILED to rebuild(online) VD primary key index to remove index orphan entries! Critical error! Error message:'|| SUBSTR(SQLERRM, 1, 100);
      END;
      LOG_WINDOW_INFO(
        I_WINDOW_ID  => V_WINDOW_ID                                ,
        IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
        I_STEP_NAME  => 'rebuild(online) VD primary key index to remove index orphan entries',
        I_ERROR_CODE => V_WINDOW_ERR_CODE                                 ,
        I_ERROR_MSG  => V_WINDOW_ERR_MSG
        );






      FOR X IN (SELECT DISTINCT TARGET_NAME
                  FROM ILM_REQUESTS
                 WHERE PROCESSED_WINDOW_ALG  = V_WINDOW_ID
                    OR PROCESSED_WINDOW_ARCH = V_WINDOW_ID
                )
      LOOP
        BEGIN
          IF ( X.TARGET_NAME = 'VALUATION' ) THEN
            DBMS_STATS.GATHER_TABLE_STATS (
               OWNNAME => 'ALLEGRO' ,
               TABNAME => 'VALUATIONDETAIL');
            DBMS_STATS.GATHER_TABLE_STATS (
               OWNNAME => 'ALLEGRO' ,
               TABNAME => 'VALUATIONSUMMARY',
               CASCADE => TRUE,
               ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE,
               METHOD_OPT=>'FOR ALL INDEXED COLUMNS SIZE 1',
               DEGREE => 8);
            V_WINDOW_ERR_CODE    := C_SUCCESS;
            V_WINDOW_ERR_MSG := 'Successfully gather stats for VD/VS tables';
          ELSE
            DBMS_STATS.GATHER_TABLE_STATS (
               OWNNAME => 'ALLEGRO' ,
               TABNAME => X.TARGET_NAME,
               CASCADE => TRUE,
               ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE,
               METHOD_OPT=>'FOR ALL INDEXED COLUMNS SIZE 1',
               DEGREE => 8);
            V_WINDOW_ERR_CODE    := C_SUCCESS;
            V_WINDOW_ERR_MSG := 'Successfully gather stats for '||X.TARGET_NAME;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            V_WINDOW_ERR_CODE    := C_FAILURE;
            V_WINDOW_ERR_MSG := 'Failed to gather stats for table '|| X.TARGET_NAME||' Error message:'|| SUBSTR(SQLERRM, 1, 100);
        END;
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                ,
          IO_STEP_ID   => GV_WINDOW_STEP_ID                          ,
          I_STEP_NAME  => 'Gather stats for table '|| X.TARGET_NAME,
          I_ERROR_CODE => V_WINDOW_ERR_CODE                                 ,
          I_ERROR_MSG  => V_WINDOW_ERR_MSG
          );
        -- incremental steps
        --GV_WINDOW_STEP_ID := GV_WINDOW_STEP_ID - 1;
      END LOOP;
    END IF;

    --CALCULATE SUMMARY

    O_REQ_COUNTER_RECOVER_ALL    :=   V_REQ_COUNTER_RECOVER_ALL   ;
    O_REQ_COUNTER_RECOVER_FAIL   :=   V_REQ_COUNTER_RECOVER_FAILED;
    O_REQ_COUNTER_RECOVER_SUCC   :=   V_REQ_COUNTER_RECOVER_ALL
                                    - V_REQ_COUNTER_RECOVER_FAILED;
    O_REQ_COUNTER_START_NEW      :=   V_REQ_COUNTER_NEW           ;
    O_REQ_COUNTER_START_LEFTOVER :=   V_REQ_COUNTER_LEFTOVER      ;
    O_REQ_COUNTER_END_SUCC       :=   V_REQ_COUNTER_COMPLETED_SUCC;
    O_REQ_COUNTER_END_FAIL       :=   V_REQ_COUNTER_COMPLETED_FAIL;
    O_REQ_COUNTER_END_LEFT       :=   V_REQ_COUNTER_NEW
                                    + V_REQ_COUNTER_LEFTOVER
                                    - V_REQ_COUNTER_COMPLETED_SUCC
                                    - V_REQ_COUNTER_COMPLETED_FAIL;
    O_WINDOW_ACTUAL_END := SYSDATE;

    BEGIN
      UPDATE ILM_WINDOWS
         SET SUMMARY_RECOVER_ALL    = O_REQ_COUNTER_RECOVER_ALL    ,
             SUMMARY_RECOVER_FAIL   = O_REQ_COUNTER_RECOVER_FAIL   ,
             SUMMARY_RECOVER_SUCC   = O_REQ_COUNTER_RECOVER_SUCC   ,
             SUMMARY_START_NEW      = O_REQ_COUNTER_START_NEW      ,
             SUMMARY_START_LEFTOVER = O_REQ_COUNTER_START_LEFTOVER ,
             SUMMARY_END_SUCC       = O_REQ_COUNTER_END_SUCC       ,
             SUMMARY_END_FAIL       = O_REQ_COUNTER_END_FAIL       ,
             SUMMARY_END_LEFT       = O_REQ_COUNTER_END_LEFT       ,
             WINDOW_ACTUAL_END      = SYSDATE
       WHERE WINDOW_ID = V_WINDOW_ID;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    LOG_WINDOW_INFO(
      I_WINDOW_ID  => V_WINDOW_ID       ,
      IO_STEP_ID   => GV_WINDOW_STEP_ID ,
      I_STEP_NAME  => 'FINISH'          ,
      I_ERROR_CODE => C_SUCCESS         ,
      I_ERROR_MSG  => ''
      );

  END START_MAINTENANCE_WINDOW;

  PROCEDURE ILM_EXECUTION_RSTR       --New in V1.1, only process restore request, can start any time
  IS
    V_SQL             VARCHAR2(4000);
    V_WINDOW_ID       NUMBER;
    V_WINDOW_MODE     VARCHAR2(40);
    V_RET_CODE        VARCHAR2(100);
    V_RET_MESSAGE     VARCHAR2(4000);
    V_STEP_ID         NUMBER := 0;

    V_OTHER_WINDOW_NAME VARCHAR2(100);
  BEGIN
    V_WINDOW_ID := SEQ_WINDOW_ID.NEXTVAL;
    V_WINDOW_MODE := 'RSTR';

    FOR X IN (SELECT JOB_NAME FROM USER_SCHEDULER_JOBS WHERE STATE IN ('SCHEDULED','RUNNING') AND JOB_NAME LIKE 'JOB_ALGILM_WINDOW_%' )
    LOOP
      V_OTHER_WINDOW_NAME := X.JOB_NAME;
      EXIT;
    END LOOP;

    IF ( V_OTHER_WINDOW_NAME IS NOT NULL ) THEN
      INSERT INTO ILM_WINDOWS ( WINDOW_ID,
                                WINDOW_MODE,
                                WINDOW_PLANNED_START,
                                WINDOW_PLANNED_END  ,
                                WINDOW_ACTUAL_START ,
                                WINDOW_ACTUAL_END   ,
                                RET_CODE,
                                RET_MESSAGE
                              )
                       VALUES (V_WINDOW_ID,
                               V_WINDOW_MODE,
                               SYSDATE,
                               SYSDATE,
                               SYSDATE,
                               SYSDATE,
                               C_FAILURE,
                               'Find another ongoing window, terminate myself. Other window:'||V_OTHER_WINDOW_NAME);
      COMMIT;
      RETURN;
    END IF;

    INSERT INTO ILM_WINDOWS (WINDOW_ID  , WINDOW_MODE ) VALUES (V_WINDOW_ID, V_WINDOW_MODE);
    COMMIT;

    V_SQL := q'[
DECLARE
  V_WINDOW_ACTUAL_START        DATE    ;
  V_WINDOW_ACTUAL_END          DATE    ;
  V_REQ_COUNTER_RECOVER_ALL    NUMBER  ;
  V_REQ_COUNTER_RECOVER_FAIL   NUMBER  ;
  V_REQ_COUNTER_RECOVER_SUCC   NUMBER  ;
  V_REQ_COUNTER_START_NEW      NUMBER  ;
  V_REQ_COUNTER_START_LEFTOVER NUMBER  ;
  V_REQ_COUNTER_END_SUCC       NUMBER  ;
  V_REQ_COUNTER_END_FAIL       NUMBER  ;
  V_REQ_COUNTER_END_LEFT       NUMBER  ;
  V_RET_CODE                   VARCHAR2(100);
  V_RET_MESSAGE                VARCHAR2(4000);
  V_WINDOW_SIZE                NUMBER;

  V_SQL                        VARCHAR2(4000);
BEGIN
  SELECT WINDOW_SIZE_MINUTES
    INTO V_WINDOW_SIZE
    FROM ILM_MTNT_WINDOW_CONFIG_V;

  ALLEGRO_ILM.START_MAINTENANCE_WINDOW(
]' ||
'    I_WINDOW_ID                  => '  || V_WINDOW_ID   ||    ','||
'    I_WINDOW_MODE                => '''|| V_WINDOW_MODE || ''' ,'||
q'[
    I_WINDOW_SIZE_MINUTES        => V_WINDOW_SIZE   ,
    I_STARTED_BY                 => 'ALLEGRO-SYSTEM',
    O_WINDOW_ACTUAL_START        => V_WINDOW_ACTUAL_START       ,
    O_WINDOW_ACTUAL_END          => V_WINDOW_ACTUAL_END         ,
    O_REQ_COUNTER_RECOVER_ALL    => V_REQ_COUNTER_RECOVER_ALL   ,
    O_REQ_COUNTER_RECOVER_FAIL   => V_REQ_COUNTER_RECOVER_FAIL  ,
    O_REQ_COUNTER_RECOVER_SUCC   => V_REQ_COUNTER_RECOVER_SUCC  ,
    O_REQ_COUNTER_START_NEW      => V_REQ_COUNTER_START_NEW     ,
    O_REQ_COUNTER_START_LEFTOVER => V_REQ_COUNTER_START_LEFTOVER,
    O_REQ_COUNTER_END_SUCC       => V_REQ_COUNTER_END_SUCC      ,
    O_REQ_COUNTER_END_FAIL       => V_REQ_COUNTER_END_FAIL      ,
    O_REQ_COUNTER_END_LEFT       => V_REQ_COUNTER_END_LEFT      ,
    O_RET_CODE                   => V_RET_CODE                  ,
    O_RET_MESSAGE                => V_RET_MESSAGE
  );
  DBMS_OUTPUT.PUT_LINE(' WINDOW_ACTUAL_START        :'|| TO_CHAR(V_WINDOW_ACTUAL_START,'YYYY-MM-DD HH24:MI:SS'));
  DBMS_OUTPUT.PUT_LINE(' WINDOW_ACTUAL_END          :'|| TO_CHAR(V_WINDOW_ACTUAL_END  ,'YYYY-MM-DD HH24:MI:SS'));
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_ALL    :'|| V_REQ_COUNTER_RECOVER_ALL   );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_FAIL   :'|| V_REQ_COUNTER_RECOVER_FAIL  );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_SUCC   :'|| V_REQ_COUNTER_RECOVER_SUCC  );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_START_NEW      :'|| V_REQ_COUNTER_START_NEW     );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_START_LEFTOVER :'|| V_REQ_COUNTER_START_LEFTOVER);
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_SUCC       :'|| V_REQ_COUNTER_END_SUCC      );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_FAIL       :'|| V_REQ_COUNTER_END_FAIL      );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_LEFT       :'|| V_REQ_COUNTER_END_LEFT      );
  DBMS_OUTPUT.PUT_LINE(' RET_CODE                   :'|| V_RET_CODE                  );
  DBMS_OUTPUT.PUT_LINE(' RET_MESSAGE                :'|| V_RET_MESSAGE               );
END;
]';

    BEGIN
      DBMS_SCHEDULER.CREATE_JOB (
        JOB_NAME        => 'JOB_ALGILM_WINDOW_'||V_WINDOW_ID,
        JOB_TYPE        => 'PLSQL_BLOCK',
        JOB_ACTION      => V_SQL,
        START_DATE      => SYSTIMESTAMP,
        auto_drop       => FALSE,
        ENABLED         => TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        V_RET_CODE       := C_FAILURE;
        V_RET_MESSAGE := 'Failed to start the maintenance window, error message:'|| SUBSTR(SQLERRM, 1, 100);
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                 ,
          IO_STEP_ID   => V_STEP_ID                                   ,
          I_STEP_NAME  => 'Failed to submit window job:'|| V_WINDOW_ID,
          I_ERROR_CODE => V_RET_CODE                                  ,
          I_ERROR_MSG  => V_RET_MESSAGE
          );
    END;
  END ILM_EXECUTION_RSTR;

  PROCEDURE ILM_EXECUTION_NON_VD     --New in V1.1, process all requests except for VD ARCH request, can start any time
  IS
    V_SQL             VARCHAR2(4000);
    V_WINDOW_ID       NUMBER;
    V_WINDOW_MODE     VARCHAR2(40);
    V_RET_CODE        VARCHAR2(100);
    V_RET_MESSAGE     VARCHAR2(4000);
    V_STEP_ID         NUMBER := 0;

    V_OTHER_WINDOW_NAME VARCHAR2(100);
  BEGIN
    V_WINDOW_ID := SEQ_WINDOW_ID.NEXTVAL;
    V_WINDOW_MODE := 'NON-VD';

    FOR X IN (SELECT JOB_NAME FROM USER_SCHEDULER_JOBS WHERE STATE IN ('SCHEDULED','RUNNING') AND JOB_NAME LIKE 'JOB_ALGILM_WINDOW_%' )
    LOOP
      V_OTHER_WINDOW_NAME := X.JOB_NAME;
      EXIT;
    END LOOP;

    IF ( V_OTHER_WINDOW_NAME IS NOT NULL) THEN
      INSERT INTO ILM_WINDOWS ( WINDOW_ID,
                                WINDOW_MODE,
                                WINDOW_PLANNED_START,
                                WINDOW_PLANNED_END  ,
                                WINDOW_ACTUAL_START ,
                                WINDOW_ACTUAL_END   ,
                                RET_CODE,
                                RET_MESSAGE
                              )
                       VALUES (V_WINDOW_ID,
                               V_WINDOW_MODE,
                               SYSDATE,
                               SYSDATE,
                               SYSDATE,
                               SYSDATE,
                               C_FAILURE,
                               'Find another ongoing window, terminate myself. Other window:'||V_OTHER_WINDOW_NAME);
      COMMIT;
      RETURN;
    END IF;

    INSERT INTO ILM_WINDOWS (WINDOW_ID  , WINDOW_MODE ) VALUES (V_WINDOW_ID, V_WINDOW_MODE);
    COMMIT;

    V_SQL := q'[
DECLARE
  V_WINDOW_ACTUAL_START        DATE    ;
  V_WINDOW_ACTUAL_END          DATE    ;
  V_REQ_COUNTER_RECOVER_ALL    NUMBER  ;
  V_REQ_COUNTER_RECOVER_FAIL   NUMBER  ;
  V_REQ_COUNTER_RECOVER_SUCC   NUMBER  ;
  V_REQ_COUNTER_START_NEW      NUMBER  ;
  V_REQ_COUNTER_START_LEFTOVER NUMBER  ;
  V_REQ_COUNTER_END_SUCC       NUMBER  ;
  V_REQ_COUNTER_END_FAIL       NUMBER  ;
  V_REQ_COUNTER_END_LEFT       NUMBER  ;
  V_RET_CODE                   VARCHAR2(100);
  V_RET_MESSAGE                VARCHAR2(4000);
  V_WINDOW_SIZE                NUMBER;

  V_SQL                        VARCHAR2(4000);
BEGIN
  SELECT WINDOW_SIZE_MINUTES
    INTO V_WINDOW_SIZE
    FROM ILM_MTNT_WINDOW_CONFIG_V;

  ALLEGRO_ILM.START_MAINTENANCE_WINDOW(
]' ||
'    I_WINDOW_ID                  => '  || V_WINDOW_ID   ||    ','||
'    I_WINDOW_MODE                => '''|| V_WINDOW_MODE || ''' ,'||
q'[
    I_WINDOW_SIZE_MINUTES        => V_WINDOW_SIZE   ,
    I_STARTED_BY                 => 'ALLEGRO-SYSTEM',
    O_WINDOW_ACTUAL_START        => V_WINDOW_ACTUAL_START       ,
    O_WINDOW_ACTUAL_END          => V_WINDOW_ACTUAL_END         ,
    O_REQ_COUNTER_RECOVER_ALL    => V_REQ_COUNTER_RECOVER_ALL   ,
    O_REQ_COUNTER_RECOVER_FAIL   => V_REQ_COUNTER_RECOVER_FAIL  ,
    O_REQ_COUNTER_RECOVER_SUCC   => V_REQ_COUNTER_RECOVER_SUCC  ,
    O_REQ_COUNTER_START_NEW      => V_REQ_COUNTER_START_NEW     ,
    O_REQ_COUNTER_START_LEFTOVER => V_REQ_COUNTER_START_LEFTOVER,
    O_REQ_COUNTER_END_SUCC       => V_REQ_COUNTER_END_SUCC      ,
    O_REQ_COUNTER_END_FAIL       => V_REQ_COUNTER_END_FAIL      ,
    O_REQ_COUNTER_END_LEFT       => V_REQ_COUNTER_END_LEFT      ,
    O_RET_CODE                   => V_RET_CODE                  ,
    O_RET_MESSAGE                => V_RET_MESSAGE
  );
  DBMS_OUTPUT.PUT_LINE(' WINDOW_ACTUAL_START        :'|| TO_CHAR(V_WINDOW_ACTUAL_START,'YYYY-MM-DD HH24:MI:SS'));
  DBMS_OUTPUT.PUT_LINE(' WINDOW_ACTUAL_END          :'|| TO_CHAR(V_WINDOW_ACTUAL_END  ,'YYYY-MM-DD HH24:MI:SS'));
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_ALL    :'|| V_REQ_COUNTER_RECOVER_ALL   );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_FAIL   :'|| V_REQ_COUNTER_RECOVER_FAIL  );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_SUCC   :'|| V_REQ_COUNTER_RECOVER_SUCC  );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_START_NEW      :'|| V_REQ_COUNTER_START_NEW     );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_START_LEFTOVER :'|| V_REQ_COUNTER_START_LEFTOVER);
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_SUCC       :'|| V_REQ_COUNTER_END_SUCC      );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_FAIL       :'|| V_REQ_COUNTER_END_FAIL      );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_LEFT       :'|| V_REQ_COUNTER_END_LEFT      );
  DBMS_OUTPUT.PUT_LINE(' RET_CODE                   :'|| V_RET_CODE                  );
  DBMS_OUTPUT.PUT_LINE(' RET_MESSAGE                :'|| V_RET_MESSAGE               );
END;
]';

    BEGIN
      DBMS_SCHEDULER.CREATE_JOB (
        JOB_NAME        => 'JOB_ALGILM_WINDOW_'||V_WINDOW_ID,
        JOB_TYPE        => 'PLSQL_BLOCK',
        JOB_ACTION      => V_SQL,
        START_DATE      => SYSTIMESTAMP,
        auto_drop       => FALSE,
        ENABLED         => TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        V_RET_CODE       := C_FAILURE;
        V_RET_MESSAGE := 'Failed to start the maintenance window, error message:'|| SUBSTR(SQLERRM, 1, 100);
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                 ,
          IO_STEP_ID   => V_STEP_ID                                   ,
          I_STEP_NAME  => 'Failed to submit window job:'|| V_WINDOW_ID,
          I_ERROR_CODE => V_RET_CODE                                  ,
          I_ERROR_MSG  => V_RET_MESSAGE
          );
    END;

  END ILM_EXECUTION_NON_VD;


  PROCEDURE START_MAINTENANCE_WINDOW
  IS
    V_SQL             VARCHAR2(4000);
    V_WINDOW_ID       NUMBER;
    V_WINDOW_MODE     VARCHAR2(40);
    V_RET_CODE        VARCHAR2(100);
    V_RET_MESSAGE     VARCHAR2(4000);
    V_STEP_ID         NUMBER := 0;

    V_OTHER_WINDOW_NAME VARCHAR2(100);
  BEGIN
    V_WINDOW_ID := SEQ_WINDOW_ID.NEXTVAL;
    V_WINDOW_MODE := 'MAINTENANCE';

    FOR X IN (SELECT JOB_NAME FROM USER_SCHEDULER_JOBS WHERE STATE IN ('SCHEDULED','RUNNING') AND JOB_NAME LIKE 'JOB_ALGILM_WINDOW_%' )
    LOOP
      V_OTHER_WINDOW_NAME := X.JOB_NAME;
      EXIT;
    END LOOP;

    IF ( V_OTHER_WINDOW_NAME IS NOT NULL ) THEN
      INSERT INTO ILM_WINDOWS ( WINDOW_ID,
                                WINDOW_MODE,
                                WINDOW_PLANNED_START,
                                WINDOW_PLANNED_END  ,
                                WINDOW_ACTUAL_START ,
                                WINDOW_ACTUAL_END   ,
                                RET_CODE,
                                RET_MESSAGE
                              )
                       VALUES (V_WINDOW_ID,
                               V_WINDOW_MODE,
                               SYSDATE,
                               SYSDATE,
                               SYSDATE,
                               SYSDATE,
                               C_FAILURE,
                               'Find another ongoing window, terminate myself. Other window:'||V_OTHER_WINDOW_NAME);
      COMMIT;
      RETURN;
    END IF;

    INSERT INTO ILM_WINDOWS (WINDOW_ID  , WINDOW_MODE ) VALUES (V_WINDOW_ID, V_WINDOW_MODE);
    COMMIT;

    V_SQL := q'[
DECLARE
  V_WINDOW_ACTUAL_START        DATE    ;
  V_WINDOW_ACTUAL_END          DATE    ;
  V_REQ_COUNTER_RECOVER_ALL    NUMBER  ;
  V_REQ_COUNTER_RECOVER_FAIL   NUMBER  ;
  V_REQ_COUNTER_RECOVER_SUCC   NUMBER  ;
  V_REQ_COUNTER_START_NEW      NUMBER  ;
  V_REQ_COUNTER_START_LEFTOVER NUMBER  ;
  V_REQ_COUNTER_END_SUCC       NUMBER  ;
  V_REQ_COUNTER_END_FAIL       NUMBER  ;
  V_REQ_COUNTER_END_LEFT       NUMBER  ;
  V_RET_CODE                   VARCHAR2(100);
  V_RET_MESSAGE                VARCHAR2(4000);
  V_WINDOW_SIZE                NUMBER;

  V_SQL                        VARCHAR2(4000);
BEGIN
  SELECT WINDOW_SIZE_MINUTES
    INTO V_WINDOW_SIZE
    FROM ILM_MTNT_WINDOW_CONFIG_V;

  ALLEGRO_ILM.START_MAINTENANCE_WINDOW(
]' ||
'    I_WINDOW_ID                  => '  || V_WINDOW_ID   ||    ','||
'    I_WINDOW_MODE                => '''|| V_WINDOW_MODE || ''' ,'||
q'[
    I_WINDOW_SIZE_MINUTES        => V_WINDOW_SIZE   ,
    I_STARTED_BY                 => 'ALLEGRO-SYSTEM',
    O_WINDOW_ACTUAL_START        => V_WINDOW_ACTUAL_START       ,
    O_WINDOW_ACTUAL_END          => V_WINDOW_ACTUAL_END         ,
    O_REQ_COUNTER_RECOVER_ALL    => V_REQ_COUNTER_RECOVER_ALL   ,
    O_REQ_COUNTER_RECOVER_FAIL   => V_REQ_COUNTER_RECOVER_FAIL  ,
    O_REQ_COUNTER_RECOVER_SUCC   => V_REQ_COUNTER_RECOVER_SUCC  ,
    O_REQ_COUNTER_START_NEW      => V_REQ_COUNTER_START_NEW     ,
    O_REQ_COUNTER_START_LEFTOVER => V_REQ_COUNTER_START_LEFTOVER,
    O_REQ_COUNTER_END_SUCC       => V_REQ_COUNTER_END_SUCC      ,
    O_REQ_COUNTER_END_FAIL       => V_REQ_COUNTER_END_FAIL      ,
    O_REQ_COUNTER_END_LEFT       => V_REQ_COUNTER_END_LEFT      ,
    O_RET_CODE                   => V_RET_CODE                  ,
    O_RET_MESSAGE                => V_RET_MESSAGE
  );
  DBMS_OUTPUT.PUT_LINE(' WINDOW_ACTUAL_START        :'|| TO_CHAR(V_WINDOW_ACTUAL_START,'YYYY-MM-DD HH24:MI:SS'));
  DBMS_OUTPUT.PUT_LINE(' WINDOW_ACTUAL_END          :'|| TO_CHAR(V_WINDOW_ACTUAL_END  ,'YYYY-MM-DD HH24:MI:SS'));
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_ALL    :'|| V_REQ_COUNTER_RECOVER_ALL   );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_FAIL   :'|| V_REQ_COUNTER_RECOVER_FAIL  );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_RECOVER_SUCC   :'|| V_REQ_COUNTER_RECOVER_SUCC  );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_START_NEW      :'|| V_REQ_COUNTER_START_NEW     );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_START_LEFTOVER :'|| V_REQ_COUNTER_START_LEFTOVER);
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_SUCC       :'|| V_REQ_COUNTER_END_SUCC      );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_FAIL       :'|| V_REQ_COUNTER_END_FAIL      );
  DBMS_OUTPUT.PUT_LINE(' REQ_COUNTER_END_LEFT       :'|| V_REQ_COUNTER_END_LEFT      );
  DBMS_OUTPUT.PUT_LINE(' RET_CODE                   :'|| V_RET_CODE                  );
  DBMS_OUTPUT.PUT_LINE(' RET_MESSAGE                :'|| V_RET_MESSAGE               );
END;
]';

    BEGIN
      DBMS_SCHEDULER.CREATE_JOB (
        JOB_NAME        => 'JOB_ALGILM_WINDOW_'||V_WINDOW_ID,
        JOB_TYPE        => 'PLSQL_BLOCK',
        JOB_ACTION      => V_SQL,
        START_DATE      => SYSTIMESTAMP,
        auto_drop       => FALSE,
        ENABLED         => TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        V_RET_CODE       := C_FAILURE;
        V_RET_MESSAGE := 'Failed to start the maintenance window, error message:'|| SUBSTR(SQLERRM, 1, 100);
        LOG_WINDOW_INFO(
          I_WINDOW_ID  => V_WINDOW_ID                                 ,
          IO_STEP_ID   => V_STEP_ID                                   ,
          I_STEP_NAME  => 'Failed to submit window job:'|| V_WINDOW_ID,
          I_ERROR_CODE => V_RET_CODE                                  ,
          I_ERROR_MSG  => V_RET_MESSAGE
          );
    END;

  END START_MAINTENANCE_WINDOW;


  --------------------------------------------
  -- Not implemented yet!
  PROCEDURE COMPARE_CKSUM (
    I_TABLE_NAME        IN  VARCHAR2,
    I_FILTER_VALUATION  IN  VARCHAR2,
    I_FILTER_DATE       IN  VARCHAR2,
    I_ARCH_REQ_ID       IN  VARCHAR2,
    O_RET_CODE          OUT VARCHAR2,
    O_RET_MESSAGE       OUT VARCHAR2
  )
  AS
  BEGIN
    NULL;
  END COMPARE_CKSUM;

  PROCEDURE COMPARE_CKSUM_W_LAST_ARCH (
    I_TABLE_NAME        IN  VARCHAR2,
    I_FILTER_VALUATION  IN  VARCHAR2,
    I_FILTER_DATE       IN  VARCHAR2,
    O_RET_CODE          OUT VARCHAR2,
    O_RET_MESSAGE       OUT VARCHAR2
  )
  AS
  BEGIN
    NULL;
  END COMPARE_CKSUM_W_LAST_ARCH;


  --------------------------------------------
  PROCEDURE REFRESH_STATUS_SINGLE(
    I_TARGET_NAME   IN  VARCHAR2,
    I_TARGET_FILTER IN  VARCHAR2,
    I_MY_REQUEST_ID IN  VARCHAR2 DEFAULT NULL,
    O_RET_CODE      OUT VARCHAR2,
    O_RET_MESSAGE   OUT VARCHAR2
  )
  IS
    V_TEST_REPORTING_CONNECTIVITY    VARCHAR2(10);
    V_TABLE_IN_ILM_LIST              VARCHAR2(10)   := 'N';

    V_VD_DATA_EXISTS_IN_ALG          VARCHAR2(10);
    V_VD_DATA_EXISTS_IN_ARCH         VARCHAR2(10);
    V_VS_DATA_EXISTS_IN_ALG          VARCHAR2(10);
    V_VS_DATA_EXISTS_IN_ARCH         VARCHAR2(10);

    V_OTHER_EXISTS_IN_ALG            VARCHAR2(10);
    V_OTHER_EXISTS_IN_ARCH           VARCHAR2(10);
    V_OTHER_EXISTS_IN_STATUS_TABLE   VARCHAR2(10);

    V_VS_PURGED                      VARCHAR2(10);
    V_VD_PURGED                      VARCHAR2(10);
    V_OTHER_PURGED                   VARCHAR2(10);
    V_TARGET_NAME                    VARCHAR2(100);

    V_REQUEST_ID                     ILM_REQUESTS.REQUEST_ID%TYPE;

    V_ACTIVE_ACTION_CNT NUMBER;
    V_VALID_VALUATION   NUMBER;

    V_OPERATION_ARCH ILM_OPERATION_MATRIX.OPERATION_ARCH%TYPE;
    V_OPERATION_RSTR ILM_OPERATION_MATRIX.OPERATION_RSTR%TYPE;
    V_FILTER_COLUMN  ILM_OPERATION_MATRIX.FILTER_COLUMN%TYPE;

    V_VALUATION_ARCHIVE    VARCHAR2(1);
  BEGIN
    V_TARGET_NAME := UPPER(I_TARGET_NAME);
    --CHECK CONNECTIVITY
    BEGIN
      IF (V_TARGET_NAME != 'VALUATION') THEN
        EXECUTE IMMEDIATE 'SELECT 1 FROM '||V_TARGET_NAME||'@DBL_REPORTING WHERE ROWNUM<=1';
      ELSE
        EXECUTE IMMEDIATE 'SELECT 1 FROM VALUATIONDETAIL@DBL_REPORTING  WHERE ROWNUM<=1';
        EXECUTE IMMEDIATE 'SELECT 1 FROM VALUATIONSUMMARY@DBL_REPORTING WHERE ROWNUM<=1';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
      O_RET_CODE       := C_REPORT_DB_NOT_AVAILABLE;
      O_RET_MESSAGE    := 'CANNOT CHECK TARGET IN REPORTING DATABASE, ERROR MESSAGE:'||SUBSTR(SQLERRM, 1, 100);
      RETURN;
    END;


    FOR X IN (SELECT TARGET_NAME,FILTER_COLUMN FROM ILM_OPERATION_MATRIX WHERE TARGET_NAME = UPPER(V_TARGET_NAME))
    LOOP
      V_TABLE_IN_ILM_LIST := 'Y';

      IF ( X.TARGET_NAME = 'VALUATION' ) THEN

        --CHECK IT'S A VALID VALUATION#
        SELECT COUNT(*) INTO V_VALID_VALUATION
          FROM ALLEGRO.VALUATION
         WHERE VALUATION = I_TARGET_FILTER;
        IF ( V_ACTIVE_ACTION_CNT = 0 ) THEN
          --DBMS_OUTPUT.PUT_LINE('Not a valid valuation#:'||I_TARGET_FILTER);
          O_RET_CODE       := 'INVALID-VALUAITON#';
          O_RET_MESSAGE    := 'Not a valid valuation#:'||I_TARGET_FILTER;
          CONTINUE;
        END IF;

        --CHECK IF THERE'S OTHER ACTIVE ACTION ON THIS ITEM
        SELECT COUNT(*) INTO V_ACTIVE_ACTION_CNT
          FROM ILM_REQUESTS
         WHERE TARGET_NAME = 'VALUATION'
           AND ACTION        IN ('ARCH','RSTR','PURG' )
           AND CURRENT_PHASE IN (C_PHASE_P_ARCH_CODE, C_PHASE_P_ALG_CODE)
           AND PHASE_STATUS  IN (C_STATUS_CODE_START_STAGE, C_STATUS_CODE_START_P_ARCH, C_STATUS_CODE_START_P_ALG)
           AND FILTER_VALUATION = I_TARGET_FILTER
           AND REQUEST_ID <> NVL(I_MY_REQUEST_ID, -1);

        -- IF THERE'S OTHER ACTIVE OPERATION ON THIS ITEM, SKIP UPDATING THE STATUS
        IF ( V_ACTIVE_ACTION_CNT != 0) THEN
          SELECT MAX(REQUEST_ID)
            INTO V_REQUEST_ID
            FROM ILM_REQUESTS
           WHERE TARGET_NAME = 'VALUATION'
             AND ACTION        IN ('ARCH','RSTR','PURG' )
             AND CURRENT_PHASE IN ('P_ARCH','P_ALG')
             AND FILTER_VALUATION = I_TARGET_FILTER
             AND REQUEST_ID <> NVL(I_MY_REQUEST_ID, -1);

          O_RET_CODE       := C_ACTIVE_ACTION;
          O_RET_MESSAGE    := 'There''s an active operation on this entry, request id:'||V_REQUEST_ID;
          RETURN;
        END IF;

        --OTHERWISE START CHECKING STATUS
        SELECT DECODE(COUNT(*),0,'N','Y') INTO V_VD_DATA_EXISTS_IN_ALG  FROM ALLEGRO.VALUATIONDETAIL        WHERE VALUATION=I_TARGET_FILTER AND ROWNUM<=1;
        SELECT DECODE(COUNT(*),0,'N','Y') INTO V_VD_DATA_EXISTS_IN_ARCH FROM VALUATIONDETAIL@DBL_REPORTING  WHERE VALUATION=I_TARGET_FILTER AND ROWNUM<=1;
        SELECT DECODE(COUNT(*),0,'N','Y') INTO V_VS_DATA_EXISTS_IN_ALG  FROM ALLEGRO.VALUATIONSUMMARY       WHERE VALUATION=I_TARGET_FILTER AND ROWNUM<=1;
        SELECT DECODE(COUNT(*),0,'N','Y') INTO V_VS_DATA_EXISTS_IN_ARCH FROM VALUATIONSUMMARY@DBL_REPORTING WHERE VALUATION=I_TARGET_FILTER AND ROWNUM<=1;

        -- IF CANNOT FIND DATA IN BOTH ALG AND ARCH, CHECK DATA IS ALREADY PURGED:
        -- IF    PURGED THEN: IN_ALG=N, IN_ARCH=N
        --    OTHERWISE: IN_ALG=NODATA, IN_ARCH=NODATA
        IF ( V_VD_DATA_EXISTS_IN_ALG = 'N' AND V_VD_DATA_EXISTS_IN_ARCH = 'N' ) THEN
          SELECT DECODE(COUNT(*),0,'NODATA','N')  INTO V_VD_PURGED
            FROM ILM_REQUESTS
           WHERE TARGET_NAME = 'VALUATION'
             AND ACTION      = 'PURG'
             AND CURRENT_PHASE = C_PHASE_FINISH_CODE
             AND PHASE_STATUS  = C_STATUS_CODE_SUCCESS_P_ALG
             AND FILTER_VALUATION = I_TARGET_FILTER;
          V_VD_DATA_EXISTS_IN_ALG  := V_VD_PURGED;
          V_VD_DATA_EXISTS_IN_ARCH := V_VD_PURGED;
        END IF;

        IF ( V_VS_DATA_EXISTS_IN_ALG = 'N' AND V_VS_DATA_EXISTS_IN_ARCH = 'N' ) THEN
          SELECT DECODE(COUNT(*),0,'NODATA','N')  INTO V_VS_PURGED
            FROM ILM_REQUESTS
           WHERE TARGET_NAME = 'VALUATION'
             AND ACTION      = 'PURG'
             AND CURRENT_PHASE = C_PHASE_FINISH_CODE
             AND PHASE_STATUS  = C_STATUS_CODE_SUCCESS_P_ALG
             AND FILTER_VALUATION = I_TARGET_FILTER;
          V_VS_DATA_EXISTS_IN_ALG  := V_VS_PURGED;
          V_VS_DATA_EXISTS_IN_ARCH := V_VS_PURGED;
        END IF;

        MERGE INTO ILM_ARCHIVE_STATUS S
        USING (SELECT 'VALUATIONDETAIL' TABLE_NAME,I_TARGET_FILTER VALUATION, V_VD_DATA_EXISTS_IN_ALG V_VD_DATA_EXISTS_IN_ALG,V_VD_DATA_EXISTS_IN_ARCH V_VD_DATA_EXISTS_IN_ARCH FROM DUAL) N
           ON (S.TABLE_NAME=N.TABLE_NAME AND S.VALUATION=N.VALUATION)
        WHEN     MATCHED THEN UPDATE SET IN_ALG  = V_VD_DATA_EXISTS_IN_ALG, IN_ARCH = V_VD_DATA_EXISTS_IN_ARCH, STATUS_DATE=SYSDATE
                               WHERE IN_ALG  <> V_VD_DATA_EXISTS_IN_ALG OR IN_ARCH <> V_VD_DATA_EXISTS_IN_ARCH
        WHEN NOT MATCHED THEN INSERT (TABLE_NAME,     VALUATION, IN_ALG,                  IN_ARCH,                  STATUS_DATE)
                              VALUES (N.TABLE_NAME, N.VALUATION, V_VD_DATA_EXISTS_IN_ALG, V_VD_DATA_EXISTS_IN_ARCH, SYSDATE);

        MERGE INTO ILM_ARCHIVE_STATUS S
        USING (SELECT 'VALUATIONSUMMARY' TABLE_NAME,I_TARGET_FILTER VALUATION, V_VS_DATA_EXISTS_IN_ALG V_VS_DATA_EXISTS_IN_ALG,V_VS_DATA_EXISTS_IN_ARCH V_VS_DATA_EXISTS_IN_ARCH FROM DUAL) N
           ON (S.TABLE_NAME=N.TABLE_NAME AND S.VALUATION=N.VALUATION)
        WHEN     MATCHED THEN UPDATE SET IN_ALG  = V_VS_DATA_EXISTS_IN_ALG, IN_ARCH = V_VS_DATA_EXISTS_IN_ARCH, STATUS_DATE=SYSDATE
                               WHERE IN_ALG  <> V_VS_DATA_EXISTS_IN_ALG OR IN_ARCH <> V_VS_DATA_EXISTS_IN_ARCH
        WHEN NOT MATCHED THEN INSERT (TABLE_NAME,     VALUATION, IN_ALG,                  IN_ARCH,                  STATUS_DATE)
                              VALUES (N.TABLE_NAME, N.VALUATION, V_VS_DATA_EXISTS_IN_ALG, V_VS_DATA_EXISTS_IN_ARCH, SYSDATE);



        V_VS_DATA_EXISTS_IN_ALG  := (CASE V_VS_DATA_EXISTS_IN_ALG  WHEN 'NODATA' THEN 'N' ELSE V_VS_DATA_EXISTS_IN_ALG  END);
        V_VS_DATA_EXISTS_IN_ARCH := (CASE V_VS_DATA_EXISTS_IN_ARCH WHEN 'NODATA' THEN 'N' ELSE V_VS_DATA_EXISTS_IN_ARCH END);
        V_VD_DATA_EXISTS_IN_ALG  := (CASE V_VD_DATA_EXISTS_IN_ALG  WHEN 'NODATA' THEN 'N' ELSE V_VD_DATA_EXISTS_IN_ALG  END);
        V_VD_DATA_EXISTS_IN_ARCH := (CASE V_VD_DATA_EXISTS_IN_ARCH WHEN 'NODATA' THEN 'N' ELSE V_VD_DATA_EXISTS_IN_ARCH END);

        V_VALUATION_ARCHIVE :=
        (CASE V_VS_DATA_EXISTS_IN_ALG||V_VS_DATA_EXISTS_IN_ARCH||V_VD_DATA_EXISTS_IN_ALG||V_VD_DATA_EXISTS_IN_ARCH
        WHEN 'NNNN' THEN 'P'
        WHEN 'NNNY' THEN 'A'
        WHEN 'NNYN' THEN 'L'
        WHEN 'NNYY' THEN '3'
        WHEN 'NYNN' THEN 'A'
        WHEN 'NYNY' THEN 'A'
        WHEN 'NYYN' THEN '6'
        WHEN 'NYYY' THEN '7'
        WHEN 'YNNN' THEN 'L'
        WHEN 'YNNY' THEN '9'
        WHEN 'YNYN' THEN 'L'
        WHEN 'YNYY' THEN 'B'
        WHEN 'YYNN' THEN 'C'
        WHEN 'YYNY' THEN 'D'
        WHEN 'YYYN' THEN 'E'
        WHEN 'YYYY' THEN 'F'
        END);

        UPDATE ALLEGRO.VALUATION SET ARCHIVE = V_VALUATION_ARCHIVE WHERE VALUATION=I_TARGET_FILTER;

        COMMIT;





      ELSE

        --CHECK IF THERE'S ACTIVE ACTION ON THIS ITEM
        SELECT COUNT(*) INTO V_ACTIVE_ACTION_CNT
          FROM ILM_REQUESTS
         WHERE TARGET_NAME = V_TARGET_NAME
           AND ACTION        IN ('ARCH','RSTR','PURG' )
           AND CURRENT_PHASE IN (C_PHASE_P_ARCH_CODE, C_PHASE_P_ALG_CODE)
           AND PHASE_STATUS  IN (C_STATUS_CODE_START_STAGE, C_STATUS_CODE_START_P_ARCH, C_STATUS_CODE_START_P_ALG)
           AND FILTER_DATE = TO_DATE(I_TARGET_FILTER,'YYYY-MM-DD')
           AND REQUEST_ID <> NVL(I_MY_REQUEST_ID, -1);

        -- IF THERE'S ACTIVE OPERATION ON THIS ITEM, SKIP UPDATING THE STATUS
        IF ( V_ACTIVE_ACTION_CNT != 0) THEN
          SELECT MAX(REQUEST_ID)
            INTO V_REQUEST_ID
            FROM ILM_REQUESTS
           WHERE TARGET_NAME = V_TARGET_NAME
             AND ACTION        IN ('ARCH','RSTR','PURG' )
             AND CURRENT_PHASE IN ('P_ARCH','P_ALG')
             AND FILTER_DATE = TO_DATE(I_TARGET_FILTER,'YYYY-MM-DD')
             AND REQUEST_ID <> NVL(I_MY_REQUEST_ID, -1);

          O_RET_CODE      := C_ACTIVE_ACTION;
          O_RET_MESSAGE   := 'There''s an active operation on this entry, action id:'||V_REQUEST_ID;
          RETURN;
        END IF;

        --OTHERWISE START CHECKING STATUS
        SELECT   OPERATION_ARCH,  OPERATION_RSTR,  FILTER_COLUMN
          INTO V_OPERATION_ARCH,V_OPERATION_RSTR,V_FILTER_COLUMN
          FROM ILM_OPERATION_MATRIX
         WHERE TARGET_NAME = V_TARGET_NAME;


        EXECUTE IMMEDIATE 'SELECT DECODE(COUNT(*),0,''N'',''Y'') '||
                           ' FROM ALLEGRO.'||V_TARGET_NAME||
                          ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||I_TARGET_FILTER||''',''YYYY-MM-DD'')'||
                            ' AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||I_TARGET_FILTER||''',''YYYY-MM-DD'')+1'||
                            ' AND ROWNUM<=1'
                     INTO V_OTHER_EXISTS_IN_ALG;

        V_OTHER_EXISTS_IN_ARCH := 'N';
        IF (V_OPERATION_ARCH = 'Y') THEN
        EXECUTE IMMEDIATE 'SELECT DECODE(COUNT(*),0,''N'',''Y'') '||
                             ' FROM '||V_TARGET_NAME||'@DBL_REPORTING '||
                            ' WHERE '|| V_FILTER_COLUMN ||' >= TO_DATE('''||I_TARGET_FILTER||''',''YYYY-MM-DD'')'||
                            '   AND '|| V_FILTER_COLUMN ||' <  TO_DATE('''||I_TARGET_FILTER||''',''YYYY-MM-DD'')+1'||
                            '   AND ROWNUM<=1'
                       INTO V_OTHER_EXISTS_IN_ARCH;
        END IF;

        -- check whether exist in status table
        SELECT COUNT(*)
          INTO V_OTHER_EXISTS_IN_STATUS_TABLE
          FROM ILM_ARCHIVE_STATUS
         WHERE TABLE_NAME  = V_TARGET_NAME
           AND TRUNC(TARGET_DATE) = TO_DATE(I_TARGET_FILTER,'YYYY-MM-DD');

        SELECT DECODE(COUNT(*),0,'NO_HISTORY','N')  INTO V_OTHER_PURGED
          FROM ILM_REQUESTS
         WHERE TARGET_NAME = V_TARGET_NAME
           AND ACTION      = 'PURG'
           AND CURRENT_PHASE = C_PHASE_FINISH_CODE
           AND PHASE_STATUS  = C_STATUS_CODE_SUCCESS_P_ALG
           AND FILTER_DATE   = TO_DATE(I_TARGET_FILTER,'YYYY-MM-DD');

        IF (V_OTHER_EXISTS_IN_ALG = 'N' AND V_OTHER_EXISTS_IN_ARCH = 'N' AND V_OTHER_PURGED = 'NO_HISTORY' ) THEN
          V_OTHER_EXISTS_IN_ALG  := 'NODATA';
          V_OTHER_EXISTS_IN_ARCH := 'NODATA';
          -- O_RET_CODE      := C_ILM_UNIT_NOT_EXIST;
          -- O_RET_MESSAGE   := 'Cannot find any information in live/archive data, no purge history for this entry:'||
          --                V_TARGET_NAME||'('||V_FILTER_COLUMN||'='||I_TARGET_FILTER||')';
          -- RETURN;
        END IF;

        MERGE INTO ILM_ARCHIVE_STATUS S
        USING (SELECT V_TARGET_NAME TABLE_NAME,TO_DATE(I_TARGET_FILTER,'YYYY-MM-DD') TARGET_DATE, V_OTHER_EXISTS_IN_ALG V_OTHER_EXISTS_IN_ALG,V_OTHER_EXISTS_IN_ARCH V_OTHER_EXISTS_IN_ARCH FROM DUAL) N
           ON (S.TABLE_NAME=N.TABLE_NAME AND TRUNC(S.TARGET_DATE)=N.TARGET_DATE)
        WHEN     MATCHED THEN UPDATE SET IN_ALG  = V_OTHER_EXISTS_IN_ALG, IN_ARCH = V_OTHER_EXISTS_IN_ARCH, STATUS_DATE=SYSDATE
                               WHERE IN_ALG <> V_OTHER_EXISTS_IN_ALG OR IN_ARCH <> V_OTHER_EXISTS_IN_ARCH
        WHEN NOT MATCHED THEN INSERT (TABLE_NAME,     TARGET_DATE, IN_ALG,                IN_ARCH,                STATUS_DATE)
                              VALUES (N.TABLE_NAME, N.TARGET_DATE, V_OTHER_EXISTS_IN_ALG, V_OTHER_EXISTS_IN_ARCH, SYSDATE);
        COMMIT;

      END IF;


    END LOOP;


    IF ( V_TABLE_IN_ILM_LIST = 'N' ) THEN
      O_RET_CODE       := C_INVALID_TARGET;
      O_RET_MESSAGE    := 'invalid target:'||V_TARGET_NAME||', cannot find target information in ILM_OPERATION_MATRIX';
      RETURN;
    END IF;

    O_RET_CODE    := C_SUCCESS;
    O_RET_MESSAGE := '';
  END REFRESH_STATUS_SINGLE;


  PROCEDURE REFRESH_STATUS_TARGET(
    I_TARGET_NAME IN  VARCHAR2,
    O_RET_CODE    OUT VARCHAR2,
    O_RET_MESSAGE OUT VARCHAR2
  )
  IS
    V_TEST_REPORTING_CONNECTIVITY VARCHAR2(10);

    V_TABLE_IN_ILM_LIST           VARCHAR2(10)   := 'N';
    V_TARGET_NAME                 VARCHAR2(100);
    V_ENTRY_RET                   VARCHAR2(200);
    V_ENTRY_RET_MSG               VARCHAR2(200);

    V_RET                         VARCHAR2(200);
    V_RET_MSG                     VARCHAR2(4000):= 'Top 100 entries with error, re-submit in single mode to check the detailed error message. ';

    V_TOTAL_EXECUTION    NUMBER  := 0;
    V_FAILED_EXECUTION   NUMBER  := 0;

    V_SQL VARCHAR2(4000);
    V_FILTER_COLUMN ILM_OPERATION_MATRIX.FILTER_COLUMN%TYPE;

    TYPE T_DATE_LIST IS TABLE OF VARCHAR2(10);
    V_DATE_LIST T_DATE_LIST;
  BEGIN
    --CHECK CONNECTIVITY
    V_TARGET_NAME := UPPER(I_TARGET_NAME);
    BEGIN
      IF (V_TARGET_NAME != 'VALUATION') THEN
        EXECUTE IMMEDIATE 'SELECT 1 FROM '||V_TARGET_NAME||'@DBL_REPORTING WHERE ROWNUM<=1';
      ELSE
        EXECUTE IMMEDIATE 'SELECT 1 FROM VALUATIONDETAIL@DBL_REPORTING  WHERE ROWNUM<=1';
        EXECUTE IMMEDIATE 'SELECT 1 FROM VALUATIONSUMMARY@DBL_REPORTING WHERE ROWNUM<=1';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        O_RET_CODE         := C_REPORT_DB_NOT_AVAILABLE;
        O_RET_MESSAGE      := 'Cannot check target in reporting database, error message:'||SUBSTR(SQLERRM, 1, 100);
        RETURN;
    END;

    FOR X IN (SELECT TARGET_NAME,FILTER_COLUMN FROM ILM_OPERATION_MATRIX WHERE TARGET_NAME = UPPER(V_TARGET_NAME))
    LOOP
      V_TABLE_IN_ILM_LIST := 'Y';
    END LOOP;

    IF ( V_TABLE_IN_ILM_LIST = 'N' ) THEN
      O_RET_CODE    := C_INVALID_TARGET;
      O_RET_MESSAGE := 'invalid target:'||V_TARGET_NAME||', cannot find target information in ILM_OPERATION_MATRIX';
      RETURN;
    END IF;


    IF (V_TARGET_NAME = 'VALUATION') THEN
      -- CONSTRUCT THE LIST OF VALUATIONS
      FOR X IN (SELECT VALUATION FROM ALLEGRO.VALUATION)
      LOOP
        V_TOTAL_EXECUTION := V_TOTAL_EXECUTION + 1;
        O_RET_CODE     := NULL;
        O_RET_MESSAGE  := NULL;
        REFRESH_STATUS_SINGLE(
          I_TARGET_NAME   => V_TARGET_NAME  ,
          I_TARGET_FILTER => X.VALUATION    ,
          I_MY_REQUEST_ID => NULL           ,
          O_RET_CODE      => V_ENTRY_RET    ,
          O_RET_MESSAGE   => V_ENTRY_RET_MSG
          );

        IF ( V_ENTRY_RET != C_SUCCESS ) THEN
          DBMS_OUTPUT.PUT_LINE('ERROR CODE:'    || V_ENTRY_RET);
          DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE:' || V_ENTRY_RET_MSG);
          V_FAILED_EXECUTION := V_FAILED_EXECUTION + 1;
          IF (V_FAILED_EXECUTION <= 100) THEN
            V_RET_MSG := V_RET_MSG ||','|| X.VALUATION;
          END IF;
        END IF;
      END LOOP;
    ELSE

      -- CONSTRUCT THE LIST OF DATES
      SELECT FILTER_COLUMN INTO V_FILTER_COLUMN FROM ILM_OPERATION_MATRIX WHERE TARGET_NAME = UPPER(V_TARGET_NAME);
      V_SQL := 'SELECT /*+ PARALLEL(16) */ DISTINCT TO_CHAR('||V_FILTER_COLUMN||',''YYYY-MM-DD'') FROM ALLEGRO.'|| V_TARGET_NAME||
               ' UNION
                SELECT /*+ PARALLEL(16) */ DISTINCT TO_CHAR('||V_FILTER_COLUMN||',''YYYY-MM-DD'') FROM '|| V_TARGET_NAME||'@DBL_REPORTING
                UNION
                SELECT DISTINCT TO_CHAR(TARGET_DATE,''YYYY-MM-DD'') FROM ILM_ARCHIVE_STATUS WHERE UPPER(TABLE_NAME)='''||V_TARGET_NAME||'''' ;
      EXECUTE IMMEDIATE V_SQL BULK COLLECT INTO V_DATE_LIST;


      FOR I IN V_DATE_LIST.first..V_DATE_LIST.last
      LOOP
        V_TOTAL_EXECUTION := V_TOTAL_EXECUTION + 1;
        REFRESH_STATUS_SINGLE(
          I_TARGET_NAME   => V_TARGET_NAME  ,
          I_TARGET_FILTER => V_DATE_LIST(I) ,
          I_MY_REQUEST_ID => NULL           ,
          O_RET_CODE      => V_ENTRY_RET    ,
          O_RET_MESSAGE   => V_ENTRY_RET_MSG
          );
        IF ( V_ENTRY_RET != C_SUCCESS ) THEN
          DBMS_OUTPUT.PUT_LINE('ERROR CODE:'    || V_ENTRY_RET);
          DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE:' || V_ENTRY_RET_MSG);
          V_FAILED_EXECUTION := V_FAILED_EXECUTION + 1;
          IF (V_FAILED_EXECUTION <= 100) THEN
            V_RET_MSG := V_RET_MSG ||','|| V_DATE_LIST(I);
          END IF;
        END IF;
      END LOOP;
    END IF;

    IF ( V_FAILED_EXECUTION > 0 ) THEN
      O_RET_CODE    := V_FAILED_EXECUTION;
      O_RET_MESSAGE := V_RET_MSG;
    ELSE
      O_RET_CODE    := C_SUCCESS;
      O_RET_MESSAGE := '';
    END IF;


  END REFRESH_STATUS_TARGET;


  PROCEDURE REFRESH_STATUS_ALL(
    O_RET_CODE    OUT VARCHAR2,
    O_RET_MESSAGE OUT VARCHAR2
  )
  IS
    V_VALUATION VARCHAR2(100);
    V_SQL VARCHAR2(2000);

    V_RET        VARCHAR2(100);
    V_RET_MSG    VARCHAR2(4000):= 'Following tables have some error when refreshing status, re-submit in table mode to check the detailed error message. ';

    V_TABLE_RET        VARCHAR2(100);
    V_TABLE_RET_MSG    VARCHAR2(4000);

    V_TOTAL_EXECUTION    NUMBER  := 0;
    V_FAILED_EXECUTION   NUMBER  := 0;
  BEGIN
    --CHECK CONNECTIVITY
    BEGIN
      EXECUTE IMMEDIATE 'SELECT 1 FROM DUAL@DBL_REPORTING WHERE ROWNUM<=1';
    EXCEPTION
      WHEN OTHERS THEN
        O_RET_CODE       := C_REPORT_DB_NOT_AVAILABLE;
        O_RET_MESSAGE    := 'Cannot check target in reporting database, error message:'||SUBSTR(SQLERRM, 1, 100);
        RETURN;
    END;

    FOR X IN (SELECT TARGET_NAME FROM ILM_OPERATION_MATRIX)
    LOOP
      V_TOTAL_EXECUTION := V_TOTAL_EXECUTION + 1;
      REFRESH_STATUS_TARGET(
        I_TARGET_NAME => X.TARGET_NAME   ,
        O_RET_CODE    =>  V_TABLE_RET    ,
        O_RET_MESSAGE =>  V_TABLE_RET_MSG
        );
      IF ( V_TABLE_RET !=  C_SUCCESS) THEN
        DBMS_OUTPUT.PUT_LINE('ERROR CODE:'    || V_TABLE_RET);
        DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE:' || V_TABLE_RET_MSG);
        V_FAILED_EXECUTION := V_FAILED_EXECUTION + 1;
        IF (V_FAILED_EXECUTION <= 100) THEN
          V_RET_MSG := V_RET_MSG ||','|| X.TARGET_NAME;
        END IF;
      END IF;
    END LOOP;

    IF ( V_FAILED_EXECUTION > 0 ) THEN
      O_RET_CODE   := V_FAILED_EXECUTION;
      O_RET_MESSAGE:= V_RET_MSG;
    ELSE
      O_RET_CODE   := C_SUCCESS;
      O_RET_MESSAGE:= '';
    END IF;
  END REFRESH_STATUS_ALL;


  --FULL MODE w/O PARAMETERS
  PROCEDURE PUT_REQUESTS
  AS
      V_ARCH_REQUEST_SUCCESS    NUMBER  ;
      V_ARCH_REQUEST_FAIL       NUMBER  ;
      V_PURG_REQUEST_SUCCESS    NUMBER  ;
      V_PURG_REQUEST_FAIL       NUMBER  ;
      V_RET_CODE                VARCHAR2(4000);
      V_RET_MESSAGE             VARCHAR2(4000);
  BEGIN
    ALLEGRO_ILM.PUT_REQUESTS(
      I_REQUEST_BY              =>'ALLEGRO-SYSTEM'       ,
      O_ARCH_REQUEST_SUCCESS   => V_ARCH_REQUEST_SUCCESS ,
      O_ARCH_REQUEST_FAIL      => V_ARCH_REQUEST_FAIL    ,
      O_PURG_REQUEST_SUCCESS   => V_PURG_REQUEST_SUCCESS ,
      O_PURG_REQUEST_FAIL      => V_PURG_REQUEST_FAIL    ,
      O_RET_CODE               => V_RET_CODE             ,
      O_RET_MESSAGE            => V_RET_MESSAGE

    );
    DBMS_OUTPUT.PUT_LINE('O_ARCH_REQUEST_SUCCESS:'|| V_ARCH_REQUEST_SUCCESS);
    DBMS_OUTPUT.PUT_LINE('O_ARCH_REQUEST_FAIL   :'|| V_ARCH_REQUEST_FAIL   );
    DBMS_OUTPUT.PUT_LINE('O_PURG_REQUEST_SUCCESS:'|| V_PURG_REQUEST_SUCCESS);
    DBMS_OUTPUT.PUT_LINE('O_PURG_REQUEST_FAIL   :'|| V_PURG_REQUEST_FAIL   );
    DBMS_OUTPUT.PUT_LINE('O_RET_CODE            :'|| V_RET_CODE            );
    DBMS_OUTPUT.PUT_LINE('O_RET_MESSAGE         :'|| V_RET_MESSAGE         );

  END PUT_REQUESTS;




  --FULL MODE WITH PARAMS
  PROCEDURE PUT_REQUESTS(
    I_REQUEST_BY              IN  ILM_REQUESTS.REQUEST_BY%TYPE,
    O_ARCH_REQUEST_SUCCESS    OUT NUMBER,
    O_ARCH_REQUEST_FAIL       OUT NUMBER,
    O_PURG_REQUEST_SUCCESS    OUT NUMBER,
    O_PURG_REQUEST_FAIL       OUT NUMBER,
    O_RET_CODE                OUT VARCHAR2,
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_ARCH_REQUEST_SUCCESS     NUMBER;
    V_ARCH_REQUEST_FAIL        NUMBER;
    V_PURG_REQUEST_SUCCESS     NUMBER;
    V_PURG_REQUEST_FAIL        NUMBER;
    V_RET_CODE                VARCHAR2(100);
    V_RET_MESSAGE             VARCHAR2(4000);
  BEGIN
    O_ARCH_REQUEST_SUCCESS  := 0;
    O_ARCH_REQUEST_FAIL     := 0;
    O_PURG_REQUEST_SUCCESS  := 0;
    O_PURG_REQUEST_FAIL     := 0;
    BEGIN
      FOR X IN (SELECT TARGET_NAME FROM ILM_OPERATION_MATRIX)
      LOOP
        PUT_REQUESTS(
           I_TARGET_NAME          => X.TARGET_NAME          ,
           I_REQUEST_BY           => I_REQUEST_BY           ,
           O_ARCH_REQUEST_SUCCESS => V_ARCH_REQUEST_SUCCESS ,
           O_ARCH_REQUEST_FAIL    => V_ARCH_REQUEST_FAIL    ,
           O_PURG_REQUEST_SUCCESS => V_PURG_REQUEST_SUCCESS ,
           O_PURG_REQUEST_FAIL    => V_PURG_REQUEST_FAIL    ,
           O_RET_CODE             => V_RET_CODE             ,
           O_RET_MESSAGE          => V_RET_MESSAGE
        );
        O_ARCH_REQUEST_SUCCESS  := O_ARCH_REQUEST_SUCCESS + V_ARCH_REQUEST_SUCCESS;
        O_ARCH_REQUEST_FAIL     := O_ARCH_REQUEST_FAIL    + V_ARCH_REQUEST_FAIL   ;
        O_PURG_REQUEST_SUCCESS  := O_PURG_REQUEST_SUCCESS + V_PURG_REQUEST_SUCCESS;
        O_PURG_REQUEST_FAIL     := O_PURG_REQUEST_FAIL    + V_PURG_REQUEST_FAIL   ;

        DBMS_OUTPUT.PUT_LINE('TARGET:'||X.TARGET_NAME);
        DBMS_OUTPUT.PUT_LINE('RET:'||V_RET_CODE);
        DBMS_OUTPUT.PUT_LINE('RET MSG:'||V_RET_MESSAGE);
        DBMS_OUTPUT.PUT_LINE('========================');

        O_RET_MESSAGE := O_RET_MESSAGE||'|'||X.TARGET_NAME||':'||V_RET_MESSAGE;

      END LOOP;
      V_RET_CODE := C_SUCCESS;
    EXCEPTION
      WHEN OTHERS THEN
        V_RET_CODE := C_FAILURE;
        O_RET_MESSAGE := O_RET_MESSAGE ||' UNEXPECTED EXCEPTION:'||SUBSTR(SQLERRM,1,100);
    END;
  END PUT_REQUESTS;


  PROCEDURE CREATE_VIEW_FOR_APR_REQ(
    I_TARGET_NAME   IN  VARCHAR2,
    O_RET_CODE      OUT VARCHAR2,
    O_RET_MESSAGE   OUT VARCHAR2
  )
  AS
    V_SQL VARCHAR2(4000);
    V_FILTER_COLUMN VARCHAR2(400);
    V_TARGET_NAME VARCHAR2(400);
  BEGIN
    V_TARGET_NAME := UPPER(I_TARGET_NAME);
    BEGIN
      SELECT FILTER_COLUMN
        INTO V_FILTER_COLUMN
        FROM ILM_OPERATION_MATRIX
       WHERE TARGET_NAME = V_TARGET_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        O_RET_CODE := C_FAILURE;
        O_RET_MESSAGE := 'Failed to get target infomation from ILM_OPERATION_MATRIX, target:'|| V_TARGET_NAME||', error msg:'||SUBSTR(SQLERRM,1,100);
        RETURN;
    END;
    V_SQL := 'CREATE VIEW ILM_VW_'||V_TARGET_NAME ||' AS ' ||
             'WITH V_DATE_LIST    AS (SELECT DISTINCT TRUNC('|| V_FILTER_COLUMN ||') '|| V_FILTER_COLUMN ||' FROM ALLEGRO.'||V_TARGET_NAME||'),' ||
                'V_LAST_UPDATES AS (SELECT MAX(LAST_UPDATE_DATE) LAST_RESTORE_DATE, FILTER_DATE '                                              ||
                                  '   FROM ILM_REQUESTS'                                                                                       ||
                                  '  WHERE TARGET_NAME='''|| V_TARGET_NAME ||''''                                                              ||
                                  '    AND ACTION = ''RSTR'''                                                                                  ||
                                  '    AND CURRENT_PHASE = ''FINISH'''                                                                         ||
                                  '    AND PHASE_STATUS  = ''P_ALG_0'''                                                                        ||
                                  '  GROUP BY FILTER_DATE'                                                                                     ||
                                  ') ,'                                                                                                        ||
                'VAS             AS ( SELECT TARGET_DATE,IN_ALG,IN_ARCH '                                                                      ||
                                  '     FROM ILM_ARCHIVE_STATUS'                                                                               ||
                                  '    WHERE TABLE_NAME='''|| V_TARGET_NAME ||''''                                                             ||
                                  ' )'                                                                                                         ||
            'SELECT NVL(A.'|| V_FILTER_COLUMN|| ',VAS.TARGET_DATE) '|| V_FILTER_COLUMN||','                                                    ||
            '       CASE WHEN (SYSDATE > GREATEST(NVL(A.'|| V_FILTER_COLUMN|| ',VAS.TARGET_DATE), NVL(LU.LAST_RESTORE_DATE,TO_DATE(''1900-01-01'',''YYYY-MM-DD'')))+RP.REGULAR_DAYS_BEFORE_ARCH) THEN ''Y'' ELSE ''N'' END AS NEED_ARCH, '||
            '       CASE WHEN (SYSDATE > GREATEST(NVL(A.'|| V_FILTER_COLUMN|| ',VAS.TARGET_DATE), NVL(LU.LAST_RESTORE_DATE,TO_DATE(''1900-01-01'',''YYYY-MM-DD'')))+RP.REGULAR_DAYS_BEFORE_PURG) THEN ''Y'' ELSE ''N'' END AS NEED_PURG, '||
            '       (CASE WHEN IN_ALG = ''Y'' AND IN_ARCH = ''Y'' THEN ''WRONG_STATS'''                                                                                                 ||
            '             WHEN IN_ALG = ''Y'' AND IN_ARCH = ''N'' THEN ''READY_4_ARCH'''                                                                                                ||
            '             WHEN IN_ALG = ''N'' AND IN_ARCH = ''Y'' THEN ''READY_4_PURG'''                                                                                                ||
            '             WHEN IN_ALG = ''N'' AND IN_ARCH = ''N'' THEN ''PURGED'''                                                                                                      ||
            '             WHEN IN_ALG = ''NODATA'' AND IN_ARCH = ''NODATA'' THEN ''NODATA'''                                                                                            ||
            '        ELSE ''UNKNOWN'''                                                                                                                                                  ||
            '        END) AS DATA_STATUS ,IN_ALG,IN_ARCH, LU.LAST_RESTORE_DATE,'                                                                                                        ||
            '        GREATEST(NVL(A.'|| V_FILTER_COLUMN|| ',VAS.TARGET_DATE), NVL(LU.LAST_RESTORE_DATE,TO_DATE(''1900-01-01'',''YYYY-MM-DD'')))+RP.REGULAR_DAYS_BEFORE_ARCH ARCH_DATE, '||
            '        GREATEST(NVL(A.'|| V_FILTER_COLUMN|| ',VAS.TARGET_DATE), NVL(LU.LAST_RESTORE_DATE,TO_DATE(''1900-01-01'',''YYYY-MM-DD'')))+RP.REGULAR_DAYS_BEFORE_PURG PURG_DATE, '||
            '        RP.REGULAR_DAYS_BEFORE_ARCH, '                                                                                                                                     ||
            '        RP.REGULAR_DAYS_BEFORE_PURG  '                                                                                                                                     ||
            '  FROM V_DATE_LIST A  '                                                                                                                                                    ||
            '  FULL OUTER JOIN VAS '                                                                                                                                                    ||
            '    ON TRUNC(CREATIONDATE) = VAS.TARGET_DATE'                                                                                                                              ||
            '  LEFT OUTER JOIN V_LAST_UPDATES LU'                                                                                                                                       ||
            '    ON LU.FILTER_DATE = NVL(A.'|| V_FILTER_COLUMN|| ',VAS.TARGET_DATE)'                                                                                                    ||
            '  LEFT OUTER JOIN ILM_RETENTION_POLICIES RP'                                                                                                                              ||
            '    ON RP.TARGET_NAME='''|| V_TARGET_NAME ||'''' ;
    DBMS_OUTPUT.PUT_LINE(V_SQL);
    BEGIN
      EXECUTE IMMEDIATE V_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        O_RET_CODE := C_FAILURE;
        O_RET_MESSAGE := 'Failed to create view for target:'|| V_TARGET_NAME||', error msg:'||SUBSTR(SQLERRM,1,100);
        RETURN;
    END;
    O_RET_CODE := C_SUCCESS;
    O_RET_MESSAGE := '';


  END CREATE_VIEW_FOR_APR_REQ;

  PROCEDURE PUT_REQUESTS(
    I_TARGET_NAME             IN  ILM_REQUESTS.TARGET_NAME%TYPE,      -- VALUATION/CORRELATION/PRICEVALUE/VOLATILITY/DBAUDIT
    I_REQUEST_BY              IN  ILM_REQUESTS.REQUEST_BY%TYPE,
    O_ARCH_REQUEST_SUCCESS         OUT NUMBER,
    O_ARCH_REQUEST_FAIL            OUT NUMBER,
    O_PURG_REQUEST_SUCCESS         OUT NUMBER,
    O_PURG_REQUEST_FAIL            OUT NUMBER,
    O_RET_CODE                OUT VARCHAR2,
    O_RET_MESSAGE             OUT VARCHAR2
  )
  IS
    V_OPERATION_ARCH ILM_OPERATION_MATRIX.OPERATION_ARCH%TYPE;
    V_OPERATION_PURG ILM_OPERATION_MATRIX.OPERATION_PURG%TYPE;
    V_FILTER_COLUMN  ILM_OPERATION_MATRIX.FILTER_COLUMN%TYPE;

    V_SQL  VARCHAR2(4000);

    V_VW_EXIST NUMBER := 0;

    TYPE T_REF_CUR IS REF CURSOR;  -- define weak REF CURSOR type
    V_CUR_WORKLIST     T_REF_CUR;
    V_TARGET_NAME ILM_REQUESTS.TARGET_NAME%TYPE;

    TYPE T_WORKLIST IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
    V_ARCH_WORKLIST  T_WORKLIST;
    V_PURG_WORKLIST  T_WORKLIST;

    V_ARCH_TOTAL_REQUESTS   NUMBER := 0;
    V_ARCH_FAILED_REQUESTS  NUMBER := 0;
    V_PURG_TOTAL_REQUESTS   NUMBER := 0;
    V_PURG_FAILED_REQUESTS  NUMBER := 0;
    V_REQ_ID           ILM_REQUESTS.REQUEST_ID%TYPE;
    V_STEP_RET_CODE    VARCHAR2(100);
    V_STEP_RET_MESSAGE VARCHAR2(4000);

  BEGIN
    BEGIN
      V_TARGET_NAME := UPPER(I_TARGET_NAME);
      SELECT   OPERATION_ARCH,   OPERATION_PURG,   FILTER_COLUMN
        INTO V_OPERATION_ARCH, V_OPERATION_PURG, V_FILTER_COLUMN
        FROM ILM_OPERATION_MATRIX
       WHERE TARGET_NAME = V_TARGET_NAME;

      SELECT COUNT(*)
        INTO V_VW_EXIST
        FROM USER_VIEWS
       WHERE VIEW_NAME = 'ILM_VW_'|| V_TARGET_NAME ;

      IF ( V_VW_EXIST = 0 ) THEN
        BEGIN
          CREATE_VIEW_FOR_APR_REQ(V_TARGET_NAME, O_RET_CODE,O_RET_MESSAGE);
        EXCEPTION
          WHEN OTHERS THEN
            O_RET_CODE    := C_FAILURE;
            O_RET_MESSAGE := 'Failed to create view for target:'||V_TARGET_NAME||', error msg:'||SUBSTR(SQLERRM,1,100);
            RETURN;
        END;

        IF (O_RET_CODE != C_SUCCESS) THEN
          RETURN;
        END IF;
      END IF;

      IF ( V_OPERATION_ARCH = 'Y' ) THEN --DO ARCHIVE
        IF    ( V_TARGET_NAME = 'VALUATION')   THEN
          V_SQL := 'SELECT DISTINCT VALUATION FROM ILM_VW_VALUATION WHERE (LOCKVALUATION<> 1) AND DATA_STATUS IN (''READY_4_ARCH'',''UNKNOWN'') AND NEED_ARCH=''Y'''||
                    ' AND VALUATION NOT IN (SELECT FILTER_VALUATION FROM ILM_REQUESTS WHERE CURRENT_PHASE != '''||C_PHASE_FINISH_CODE||''' AND TARGET_NAME = ''VALUATION'') ORDER BY 1';
        ELSE
          V_SQL := 'SELECT DISTINCT TO_CHAR('||V_FILTER_COLUMN||',''YYYY-MM-DD'') FROM ILM_VW_'|| V_TARGET_NAME ||' WHERE DATA_STATUS IN (''READY_4_ARCH'',''UNKNOWN'') AND NEED_ARCH=''Y'''||
                   '   AND '||V_FILTER_COLUMN||' NOT IN (SELECT FILTER_DATE FROM ILM_REQUESTS WHERE CURRENT_PHASE != '''||C_PHASE_FINISH_CODE||''' AND TARGET_NAME = '''|| V_TARGET_NAME||''')  ORDER BY 1';
        END IF;
        DBMS_OUTPUT.PUT_LINE(V_SQL);

        BEGIN
          EXECUTE IMMEDIATE V_SQL BULK COLLECT INTO V_ARCH_WORKLIST;
        EXCEPTION
          WHEN OTHERS THEN
            O_RET_CODE    := C_FAILURE;
            O_RET_MESSAGE := 'Failed to get worklist, error msg:'||SUBSTR(SQLERRM,1,100);
            RETURN;
        END;

        O_RET_CODE    :=C_SUCCESS;
        O_RET_MESSAGE :=NULL;
        V_ARCH_TOTAL_REQUESTS := V_ARCH_TOTAL_REQUESTS + V_ARCH_WORKLIST.COUNT();
        IF (V_ARCH_WORKLIST.COUNT() > 0) THEN
          FOR I IN V_ARCH_WORKLIST.first..V_ARCH_WORKLIST.last
          LOOP
            PUT_REQUEST(
              I_TARGET_NAME            =>  V_TARGET_NAME                                                                                        ,
              I_ACTION                 => 'ARCH'                                                                                                ,
              I_FILTER_VALUATION       => (CASE V_TARGET_NAME WHEN 'VALUATION' THEN V_ARCH_WORKLIST(I) ELSE NULL                                     END ),
              I_FILTER_DATE            => (CASE V_TARGET_NAME WHEN 'VALUATION' THEN NULL               ELSE TO_DATE(V_ARCH_WORKLIST(I),'YYYY-MM-DD') END ),
              I_REQUEST_BY             => I_REQUEST_BY                                                                                          ,
              I_OVERRIDE_OTHER_REQUEST => 'N'                                                                                                   ,
              O_REQUEST_ID             => V_REQ_ID                                                                                              ,
              O_RET_CODE               => V_STEP_RET_CODE                                                                                       ,
              O_RET_MESSAGE            => V_STEP_RET_MESSAGE
            );

            IF (    V_STEP_RET_CODE != C_SUCCESS
                AND REGEXP_SUBSTR(V_STEP_RET_MESSAGE, '[^|]+', 1, 1, 'imx') NOT IN ( C_ARCH_STATUS_ERROR_NOACTION, C_ARCH_STATUS_ERROR_NODATA ) ) THEN
              DBMS_OUTPUT.PUT_LINE('V_STEP_RET_CODE:'||V_STEP_RET_CODE||':'||O_RET_MESSAGE);
              V_ARCH_FAILED_REQUESTS := V_ARCH_FAILED_REQUESTS +1;
              IF (V_ARCH_FAILED_REQUESTS <= 20) THEN
                O_RET_MESSAGE := O_RET_MESSAGE||' REQ:'||V_REQ_ID||' ERR:'||V_STEP_RET_MESSAGE;
              END IF;
            END IF;
          END LOOP;
        END IF;
      END IF;
      O_ARCH_REQUEST_SUCCESS := V_ARCH_TOTAL_REQUESTS - V_ARCH_FAILED_REQUESTS;
      O_ARCH_REQUEST_FAIL    := V_ARCH_FAILED_REQUESTS;

      IF ( V_OPERATION_PURG = 'Y' ) THEN --DO PURGE
        IF    ( V_TARGET_NAME = 'CORRELATION')   THEN
          V_SQL := 'SELECT DISTINCT TO_CHAR(CORRDATE,''YYYY-MM-DD'') FROM ILM_VW_CORRELATION WHERE DATA_STATUS IN (''READY_4_PURG'' , ''UNKNOWN'') AND NEED_PURG=''Y'''||
                   '   AND '||V_FILTER_COLUMN||' NOT IN (SELECT FILTER_DATE FROM ILM_REQUESTS WHERE CURRENT_PHASE != '''||C_PHASE_FINISH_CODE||''' AND TARGET_NAME = '''|| V_TARGET_NAME||''')  ORDER BY 1';
        ELSIF ( V_TARGET_NAME = 'VALUATION') THEN
            V_SQL := 'SELECT DISTINCT VALUATION FROM ILM_VW_VALUATION WHERE DATA_STATUS = ''READY_4_PURG'' AND NEED_PURG=''Y''' ||
                   '   AND VALUATION NOT IN (SELECT FILTER_VALUATION FROM ILM_REQUESTS WHERE CURRENT_PHASE != '''||C_PHASE_FINISH_CODE||''' AND TARGET_NAME = '''|| V_TARGET_NAME||''')  ORDER BY 1';
        ELSE
          IF ( V_OPERATION_ARCH = 'Y') THEN
            V_SQL := 'SELECT DISTINCT TO_CHAR('||V_FILTER_COLUMN||',''YYYY-MM-DD'') FROM ILM_VW_'|| V_TARGET_NAME ||' WHERE DATA_STATUS = ''READY_4_PURG'' AND NEED_PURG=''Y''' ||
                   '   AND '||V_FILTER_COLUMN||' NOT IN (SELECT FILTER_DATE FROM ILM_REQUESTS WHERE CURRENT_PHASE != '''||C_PHASE_FINISH_CODE||''' AND TARGET_NAME = '''|| V_TARGET_NAME||''')  ORDER BY 1';
          ELSE
            V_SQL := 'SELECT DISTINCT TO_CHAR('||V_FILTER_COLUMN||',''YYYY-MM-DD'') FROM ILM_VW_'|| V_TARGET_NAME ||' WHERE DATA_STATUS IN (''READY_4_ARCH'',''UNKNOWN'') AND NEED_PURG=''Y''' ||
                     '   AND '||V_FILTER_COLUMN||' NOT IN (SELECT FILTER_DATE FROM ILM_REQUESTS WHERE CURRENT_PHASE != '''||C_PHASE_FINISH_CODE||''' AND TARGET_NAME = '''|| V_TARGET_NAME||''')  ORDER BY 1';

          END IF;
        END IF;
        DBMS_OUTPUT.PUT_LINE(V_SQL);

        BEGIN
          EXECUTE IMMEDIATE V_SQL BULK COLLECT INTO V_PURG_WORKLIST;
        EXCEPTION
          WHEN OTHERS THEN
            O_RET_CODE    := C_FAILURE;
            O_RET_MESSAGE := 'Failed to get purg worklist, error msg:'||SUBSTR(SQLERRM,1,100)||', SQL:'||V_SQL ;
            RETURN;
        END;

        O_RET_CODE    :=C_SUCCESS;
        O_RET_MESSAGE :=NULL;

        IF (V_PURG_WORKLIST.COUNT() > 0) THEN
          FOR I IN V_PURG_WORKLIST.first..V_PURG_WORKLIST.last
          LOOP
            V_PURG_TOTAL_REQUESTS := V_PURG_TOTAL_REQUESTS + 1;
            PUT_REQUEST(
              I_TARGET_NAME            =>  V_TARGET_NAME                                                                                        ,
              I_ACTION                 => 'PURG'                                                                                                ,
              I_FILTER_VALUATION       => (CASE V_TARGET_NAME WHEN 'VALUATION' THEN V_PURG_WORKLIST(I) ELSE NULL                                     END ),
              I_FILTER_DATE            => (CASE V_TARGET_NAME WHEN 'VALUATION' THEN NULL               ELSE TO_DATE(V_PURG_WORKLIST(I),'YYYY-MM-DD') END ),
              I_REQUEST_BY             => I_REQUEST_BY                                                                                          ,
              I_OVERRIDE_OTHER_REQUEST => 'N'                                                                                                   ,
              O_REQUEST_ID             => V_REQ_ID                                                                                              ,
              O_RET_CODE               => V_STEP_RET_CODE                                                                                       ,
              O_RET_MESSAGE            => V_STEP_RET_MESSAGE
            );

            IF (    V_STEP_RET_CODE != C_SUCCESS
                AND REGEXP_SUBSTR(V_STEP_RET_MESSAGE, '[^|]+', 1, 1, 'imx') NOT IN ( C_ARCH_STATUS_ERROR_NOACTION, C_ARCH_STATUS_ERROR_NODATA ) ) THEN
              DBMS_OUTPUT.PUT_LINE(O_RET_MESSAGE);
              V_PURG_FAILED_REQUESTS := V_PURG_FAILED_REQUESTS +1;
              IF (V_PURG_FAILED_REQUESTS <= 20) THEN
                O_RET_MESSAGE := O_RET_MESSAGE||' REQ:'||V_REQ_ID||' ERR:'||V_STEP_RET_MESSAGE;
              END IF;
            END IF;
          END LOOP;
        END IF;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error:'||SUBSTR(SQLERRM,1,100));
        O_RET_CODE    := C_FAILURE;
        O_RET_MESSAGE := 'Unexpected error:'||SUBSTR(SQLERRM,1,100);
    END;
    O_PURG_REQUEST_SUCCESS := V_PURG_TOTAL_REQUESTS - V_PURG_FAILED_REQUESTS;
    O_PURG_REQUEST_FAIL    := V_PURG_FAILED_REQUESTS;

  END PUT_REQUESTS ;

  PROCEDURE VALIDATE_TARGET(
    I_TARGET_NAME            IN  ILM_OPERATION_MATRIX.TARGET_NAME%TYPE,
    O_RET_OUTPUT             OUT VARCHAR2,
    O_RET_ISSUE_CORRECTION   OUT VARCHAR2
  )
  AS
    V_COUNTER NUMBER := 0;
    V_TARGET_NAME VARCHAR2(50);
    V_FILTER_NAME VARCHAR2(50);

    V_MSG         VARCHAR2(4000);

    V_OPER_ARCH    VARCHAR(5);
    V_OPER_RSTR    VARCHAR(5);
    V_OPER_PURG    VARCHAR(5);

    V_STEP  NUMBER := 0;
    V_FILTER_COLUMN_DATATYPE VARCHAR2(50);
    V_PRIVS VARCHAR2(100);

  BEGIN
    V_TARGET_NAME := UPPER(I_TARGET_NAME);
    --OR V_TARGET_NAME = 'CORRELATION'
    IF ( V_TARGET_NAME = 'VALUATION'  ) THEN
      O_RET_OUTPUT := 'Please contact DBA team for validation on valuation/correlation tables.';
      RETURN;
    END IF;

    --1. TABLE EXIST IN ILM_OPERATION_MATRIX
    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*) INTO V_COUNTER
      FROM ILM_OPERATION_MATRIX
     WHERE TARGET_NAME = V_TARGET_NAME;

    IF (V_COUNTER = 1) THEN
      O_RET_OUTPUT := 'STEP '||V_STEP||' [SUCC]: Target '||V_TARGET_NAME||' exist in ilm_operation_matrix';
    ELSE
      O_RET_OUTPUT := 'STEP '||V_STEP||' [FAIL]: Target '||V_TARGET_NAME||' not exist in ilm_operation_matrix';
      O_RET_ISSUE_CORRECTION := 'CORRECTIONS:'|| CHR(10) ||' STEP '||V_STEP||': INSERT INTO ALG_ILM_CONTROL.ILM_OPERATION_MATRIX VALUES......';
    END IF;

    BEGIN
      SELECT FILTER_COLUMN
        INTO V_FILTER_NAME
        FROM ILM_OPERATION_MATRIX
       WHERE TARGET_NAME = V_TARGET_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    --2. ENTRY EXIST IN ILM_OPERATION_MATRIX IS VALID
    V_STEP :=  V_STEP + 1;
    BEGIN
      SELECT OPERATION_ARCH,OPERATION_RSTR,OPERATION_PURG
        INTO    V_OPER_ARCH,   V_OPER_RSTR,   V_OPER_PURG
        FROM ILM_OPERATION_MATRIX
       WHERE TARGET_NAME = V_TARGET_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    CASE V_OPER_ARCH||V_OPER_RSTR||V_OPER_PURG
    WHEN 'YYY' THEN  O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [SUCC]: Valid ARP configuration: YYY';
    WHEN 'YYN' THEN  O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [SUCC]: Valid ARP configuration: YYN';
    WHEN 'YNY' THEN  O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [SUCC]: Valid ARP configuration: YNY';
    WHEN 'YNN' THEN  O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [SUCC]: Valid ARP configuration: YNN';
    WHEN 'NYY' THEN  BEGIN
                       O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [FAIL]: Invalid ARP configuration: NYY, impossible to restore without archiving';
                       O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                                 'STEP '||V_STEP||': Update with ILM_OPERATION_MATRIX to enable/disable arch operation';
                     END;
    WHEN 'NYN' THEN  BEGIN
                       O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [FAIL]: Invalid ARP configuration: NYN, impossible to restore without archiving';
                       O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                                 'STEP '||V_STEP||': Update with ILM_OPERATION_MATRIX to enable/disable arch operation';
                     END;
    WHEN 'NNY' THEN  O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [SUCC]: Valid ARP configuration: NNY';
    WHEN 'NNN' THEN  O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [SUCC]: Valid ARP configuration: NNN';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) || 'STEP '||V_STEP||' [FAIL]: invalid ARP configuration: '||V_OPER_ARCH||V_OPER_RSTR||V_OPER_PURG;
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': Update ILM_OPERATION_MATRIX with Y|N for columns OPERATION_ARCH,OPERATION_RSTR,OPERATION_PURG ';
    END CASE;

    --3. TARGET RETENTION POLICY IS SET
    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*) INTO V_COUNTER
      FROM ILM_RETENTION_POLICIES
     WHERE TARGET_NAME = V_TARGET_NAME;
    IF (V_COUNTER = 1) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: Target '||V_TARGET_NAME||' retention found in ILM_RETENTION_POLICIES';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: Target '||V_TARGET_NAME||' does not exist in ILM_RETENTION_POLICIES';
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': INSERT INTO ALG_ILM_CONTROL.ILM_RETENTION_POLICIES VALUES......';
    END IF;

    --4. FILTER COLUMN IS DATE TYPE
    V_STEP :=  V_STEP + 1;
    BEGIN
      SELECT DATA_TYPE
        INTO V_FILTER_COLUMN_DATATYPE
        FROM DBA_TAB_COLUMNS
       WHERE OWNER='ALLEGRO'
         AND TABLE_NAME=V_TARGET_NAME
         AND COLUMN_NAME = V_FILTER_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    IF (V_FILTER_COLUMN_DATATYPE = 'DATE') THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: Filter type is date';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: Filter type is '||V_FILTER_COLUMN_DATATYPE||', expect date';
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': Specify a date column as the APR filter column';
    END IF;

    --5. TABLE/FILTER_COLUMN EXIST IN ALLEGRO
    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*) INTO V_COUNTER
      FROM DBA_TABLES
     WHERE OWNER='ALLEGRO'
       AND TABLE_NAME=V_TARGET_NAME;
    IF (V_COUNTER = 1) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: Target '||V_TARGET_NAME||' exists in ALLEGRO schema';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: Target '||V_TARGET_NAME||' does not exist in ALLEGRO schema';
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': This issue cannot be fixed, you may specified a wrong table name, update the table name can be an option';
    END IF;

    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*) INTO V_COUNTER
      FROM DBA_TAB_COLUMNS
     WHERE OWNER='ALLEGRO'
       AND TABLE_NAME=V_TARGET_NAME
       AND COLUMN_NAME = V_FILTER_NAME;
    IF (V_COUNTER = 1) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: Filter column '||V_FILTER_NAME||' exists in ALLEGRO.'||V_TARGET_NAME;
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: Filter column '||V_FILTER_NAME||' does not exist in ALLEGRO.'||V_TARGET_NAME;
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': This issue cannot be fixed, you may specified a wrong filter column name, update the wrong column name can be an option';
    END IF;


    --6. PROPERLY INDEXES
    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*) INTO V_COUNTER
      FROM DBA_IND_COLUMNS
     WHERE TABLE_OWNER='ALLEGRO'
       AND TABLE_NAME=V_TARGET_NAME
       AND COLUMN_NAME = V_FILTER_NAME;

    IF ( V_COUNTER = 1 ) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: APR Filter column: ALLEGRO.'|| V_TARGET_NAME|| '('||V_FILTER_NAME||') is indexed';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: APR Filter column: ALLEGRO.'|| V_TARGET_NAME|| '('||V_FILTER_NAME||') is not indexed';
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': Create an index with: CREATE INDEX ILMIDX_'||V_TARGET_NAME||' ON ALLEGRO.'||V_TARGET_NAME||'('|| V_FILTER_NAME ||');';
    END IF;

    --7. TABLE EXISTS IN ARCH
    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*) INTO V_COUNTER
      FROM DBA_TABLES@DBL_REPORTING
     WHERE OWNER='ALG_ILM_ARCHIVE'
       AND TABLE_NAME=V_TARGET_NAME;
    IF (V_COUNTER = 1) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: Target '||V_TARGET_NAME||' exists in ALLEGRO schema';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: Target '||V_TARGET_NAME||' does not exist in ALG_ILM_ARCHIVE schema in reporting database';
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': IN THE ARCHIVE DATABASE: Create table with: CREATE TABLE ALG_ILM_ARCHIVE.'||V_TARGET_NAME||
                                                                      '    AS SELECT * FROM ALLEGRO.'||V_TARGET_NAME||' WHERE 1=2';
    END IF;


    --8. ARCH TABLE IS INDEXED
    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*) INTO V_COUNTER
      FROM DBA_IND_COLUMNS@DBL_REPORTING
     WHERE TABLE_OWNER='ALG_ILM_ARCHIVE'
       AND TABLE_NAME=V_TARGET_NAME
       AND COLUMN_NAME = V_FILTER_NAME;

    IF ( V_COUNTER = 1 ) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: APR Filter column IN ARCHIVE DATABASE: ALG_ILM_ARCHIVE.'|| V_TARGET_NAME|| '('||V_FILTER_NAME||') is indexed';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: APR Filter column IN ARCHIVE: ALG_ILM_ARCHIVE.'|| V_TARGET_NAME|| '('||V_FILTER_NAME||') is not indexed';
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': IN THE ARCHIVE DATABASE:  Create an index with: CREATE INDEX ILMIDX_'||V_TARGET_NAME||' ON ALG_ILM_ARCHIVE.'||V_TARGET_NAME||'('|| V_FILTER_NAME ||');';
    END IF;

    --9. OBJECT PRIV INSERT/DELETE/SELECT  EXIST FOR TARGET IN ALLEGRO
    V_STEP :=  V_STEP + 1;
    BEGIN
      SELECT LISTAGG(PRIVILEGE,',') WITHIN GROUP (ORDER BY PRIVILEGE DESC)
        INTO V_PRIVS
        FROM DBA_TAB_PRIVS
       WHERE GRANTEE='ALG_ILM_CONTROL'
         AND OWNER='ALLEGRO'
         AND TABLE_NAME = V_TARGET_NAME
         AND PRIVILEGE IN ('SELECT','DELETE','INSERT')
       GROUP BY GRANTEE,OWNER,TABLE_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    IF ( V_PRIVS = 'SELECT,INSERT,DELETE' ) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: User ALG_ILM_CONTROL does have INSERT/DELETE/SELECT privs on ALLEGRO.'||V_TARGET_NAME;
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: User ALG_ILM_CONTROL needs INSERT/DELETE/SELECT privs on ALLEGRO.'||V_TARGET_NAME||', Current privs:'||V_PRIVS;
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': Execute as SYS user: GRANT SELECT,INSERT,DELETE ON ALLEGRO.'||V_TARGET_NAME||' TO ALG_ILM_CONTROL';
    END IF;

    --10. OBJECT PRIV SELECT EXIST FOR TARGET IN ARCH
    V_STEP :=  V_STEP + 1;
    SELECT COUNT(*)
      INTO V_COUNTER
      FROM DBA_TAB_PRIVS@DBL_REPORTING
     WHERE GRANTEE='ALG_ILM_ARCHIVE'
       AND OWNER='ALLEGRO'
       AND TABLE_NAME = V_TARGET_NAME
       AND PRIVILEGE = 'SELECT';

    IF ( V_COUNTER = 1 ) THEN
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [SUCC]: User ALG_ILM_ARCHIVE has SELECT privs on ALLEGRO.'||V_TARGET_NAME||' in ARCHIVE DATABASE';
    ELSE
      O_RET_OUTPUT := O_RET_OUTPUT|| CHR(10) ||'STEP '||V_STEP||' [FAIL]: User ALG_ILM_ARCHIVE needs SELECT privs on ALLEGRO.'||V_TARGET_NAME||' in ARCHIVE DATABASE';
      O_RET_ISSUE_CORRECTION := O_RET_ISSUE_CORRECTION|| CHR(10) ||
                                'STEP '||V_STEP||': In the archive database, execute as SYS user: GRANT SELECT ON ALLEGRO.'||V_TARGET_NAME||' TO ALG_ILM_ARCHIVE';
    END IF;

    O_RET_ISSUE_CORRECTION := NVL(O_RET_ISSUE_CORRECTION, 'SUCCESS, ALL CHECK PASSED, NO CORRECTION REQUIRED');

  END VALIDATE_TARGET;



  PROCEDURE EMERA_APR_USERINPUT
  AS
    V_RET_CODE    VARCHAR2(400);
    V_RET_MESSAGE VARCHAR2(4000);
    V_REQ_ID      NUMBER;

    V_REQ_SUBMIT_STATUS VARCHAR2(30);

    STATUS_SUCC CONSTANT VARCHAR2(40) :='SUBMITTED SUCCESSFULLY';
    STATUS_FAIL CONSTANT VARCHAR2(40) :='SUBMITTED FAILED';
    STATUS_TBD  CONSTANT VARCHAR2(40) :='TO BE SUBMITTED';

  BEGIN

    FOR X IN (SELECT SURROGATE,ACTION,TARGET_VALUATION,TARGET_DATE,TARGETNAME,REQUESTTYPE,CANCEL_REQ_ID,CREATIONNAME
                FROM ALLEGRO.EMERA_APR_USERINPUT
               WHERE UPPER(STATUS) = STATUS_TBD
             )
    LOOP
      IF ( UPPER(X.REQUESTTYPE) = 'PUT_REQUEST') THEN
        PUT_REQUEST(
          I_TARGET_NAME            => X.TARGETNAME         ,
          I_ACTION                 => X.ACTION             ,
          I_FILTER_VALUATION       => X.TARGET_VALUATION   ,
          I_FILTER_DATE            => X.TARGET_DATE        ,
          I_REQUEST_BY             => X.CREATIONNAME       ,
          I_OVERRIDE_OTHER_REQUEST => 'Y'                  ,
          O_REQUEST_ID             => V_REQ_ID             ,
          O_RET_CODE               => V_RET_CODE           ,
          O_RET_MESSAGE            => V_RET_MESSAGE
        );
        --DBMS_OUTPUT.PUT_LINE(C_STATUS_CODE_SUCCESS_STAGE||':'||V_RET_CODE);
        CASE V_RET_CODE
        WHEN C_SUCCESS  THEN V_REQ_SUBMIT_STATUS := STATUS_SUCC;
        ELSE                 V_REQ_SUBMIT_STATUS := STATUS_FAIL;
        END CASE;




      ELSIF ( UPPER(X.REQUESTTYPE) = 'CANCEL_REQUEST') THEN
        IF ( X.CANCEL_REQ_ID IS NOT NULL ) THEN -- REQUEST ID MODE
          CANCEL_REQUEST(
            I_CNCL_REQUEST_ID       => X.CANCEL_REQ_ID,
            I_CANCELLED_BY          => X.CREATIONNAME  ,
            O_RET_CODE              => V_RET_CODE   ,
            O_RET_MESSAGE           => V_RET_MESSAGE
          );
        ELSE -- DATA MODE
          CANCEL_REQUEST(
            I_TARGET_NAME           => X.TARGETNAME,
            I_CNCL_VALUATION        => X.TARGET_VALUATION,
            I_CNCL_DATE             => X.TARGET_DATE,
            I_CANCELLED_BY          => X.CREATIONNAME  ,
            O_RET_CODE              => V_RET_CODE   ,
            O_RET_MESSAGE           => V_RET_MESSAGE
          );
        END IF;

        CASE V_RET_CODE WHEN C_SUCCESS THEN V_REQ_SUBMIT_STATUS := STATUS_SUCC;
        ELSE                                V_REQ_SUBMIT_STATUS := STATUS_FAIL;
         END CASE;



      ELSE
        -- CANNOT RECOGNIZE THE REQUEST_TYPE
        V_REQ_SUBMIT_STATUS := STATUS_FAIL;
        V_RET_MESSAGE       := 'Cannot recignize REQUESTTYPE, expect PUT_REQUEST|CANCEL_REQUEST, got:'||UPPER(X.REQUESTTYPE);
      END IF;

      UPDATE ALLEGRO.EMERA_APR_USERINPUT
         SET STATUS  = V_REQ_SUBMIT_STATUS,
             MESSAGE = 'RequestID:'|| V_REQ_ID ||', Request processing output:'||V_RET_MESSAGE
       WHERE SURROGATE = X.SURROGATE;
      COMMIT;

    END LOOP;



  END EMERA_APR_USERINPUT;

END ALLEGRO_ILM;
/
